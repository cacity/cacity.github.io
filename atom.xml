<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>峰哥Python笔记</title>
  
  
  <link href="http://cacity.live/atom.xml" rel="self"/>
  
  <link href="http://cacity.live/"/>
  <updated>2023-06-20T05:43:15.773Z</updated>
  <id>http://cacity.live/</id>
  
  <author>
    <name>峰哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/%E5%9F%BA%E4%BA%8E%20Python%20%E7%9A%84%E5%9C%B0%E7%90%83%E7%89%A9%E7%90%86%E5%8F%B0%E7%BD%91%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E7%9B%91%E6%8E%A7%E6%97%A5%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86%E4%B8%8E%E5%8F%8D%E9%A6%88%E7%94%9F%E6%88%90/"/>
    <id>http://cacity.live/2023/12/29/%E5%9F%BA%E4%BA%8E%20Python%20%E7%9A%84%E5%9C%B0%E7%90%83%E7%89%A9%E7%90%86%E5%8F%B0%E7%BD%91%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E7%9B%91%E6%8E%A7%E6%97%A5%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86%E4%B8%8E%E5%8F%8D%E9%A6%88%E7%94%9F%E6%88%90/</id>
    <published>2023-12-29T14:01:07.037Z</published>
    <updated>2023-06-20T05:43:15.773Z</updated>
    
    <content type="html"><![CDATA[<p>PyQt6小软件–基于Python的地球物理台网数据质量监控周报报自动化处理与生成反馈报表</p><p>基于<code>Python</code>、<code>PyQt6</code>和<code>Openpyxl</code>开发的地球物理台网数据质量监控周报自动化处理及生成反馈报表的软件，主要服务于需要响应并处理地球物理站网数据质量监控周报的工作需求。每周三，国家地球物理台网中心网站会发布数据质量监控周报，要求各相关单位对存在的质量问题进行及时处理，并反馈处理结果。处理过程中，需要从全国数据中筛选出黑龙江省相关的反馈，通知所属中心站&#x2F;台站，并制作固定格式的反馈表格进行上报。这款软件有效地简化了这一流程，通过自动化处理数据和生成反馈报表，大幅度提高了工作效率，同时避免了人工操作过程中可能出现的错误。</p><p>最后的成品大概是这样：<br><img src="https://files.mdnice.com/user/38447/d684fdd5-d672-4890-8908-2556f6aa5654.png"></p><p>一、软件功能：</p><p>1.数据加载：通过用户界面，允许用户选择一个或多个<code>Excel</code>文件进行数据处理。对于每个文件，都会读取电子表格数据，然后进行预设的筛选操作。该功能在程序层面通过<code>PyQt</code>的<code>QFileDialog</code>实现文件选择和读取，然后通过<code>pandas</code>库进行数据读取和筛选。</p><p>2.数据处理与筛选：根据预设规则（例如，筛选出第三列前两位为’23’的数据行），在数据加载阶段就进行了数据筛选。此功能通过<code>pandas</code>库实现，利用了<code>pandas</code>强大的数据处理能力。</p><p>3.报告生成：基于筛选出的数据，自动填写和生成监控反馈报告，报告为<code>Excel</code>文件格式。此功能在程序层面通过<code>Openpyxl</code>库实现，<code>Openpyxl</code>库提供了丰富的<code>Excel</code>操作功能，包括但不限于合并单元格、设置字体、设置边框、设置对齐方式等。</p><p>4.数据预览：加载并处理后的数据，可以在用户界面中预览，具备良好的用户交互体验。此功能通过<code>PyQt</code>的<code>QTableWidget</code>实现，每行数据都会被填充到表格的相应位置，同时通过<code>resizeColumnsToContents</code>和<code>resizeRowsToContents</code>方法调整列宽和行高，使得数据展示更美观。</p><p>5.文件自动打开：生成的反馈报告文件会被自动打开，方便用户查看和进一步编辑。此功能通过os库的startfile方法实现。</p><p>二、程序实现：</p><p>1.<code>Python</code>、<code>PyQt6</code>及<code>Openpyxl</code>的应用</p><p>该软件以<code>Python</code>为基础，通过<code>PyQt6</code>库构建用户界面，利用<code>pandas</code>进行数据处理，并使用<code>Openpyxl</code>进行<code>Excel</code>操作。Python是一种解释型、交互式、面向对象的编程语言，语法简洁明了，易于学习，而且具有强大的标准库和丰富的第三方库。</p><p><code>PyQt6</code>是一款开发<code>Python</code>图形用户界面应用程序的工具包。它将<code>Qt</code>库（一种<code>C++GUI</code>应用开发框架）的丰富特性和Python的易用性结合在一起。使用<code>PyQt6</code>，我们可以快速创建出具有丰富功能、易于操作、美观的用户界面，大大提高了开发效率。</p><p><code>pandas</code>是一个为<code>Python</code>编程语言提供的强大数据结构和数据分析工具。它为我们提供了数据处理、清洗、分析等众多功能，特别适合于处理结构化数据，如表格数据等。</p><p><code>Openpyxl</code>是<code>Python</code>中操作<code>Excel2007</code>及以上版本的库。通过它，我们可以轻松地读取、写入和修改<code>Excel</code>文件，也可以应用各种样式，如字体、背景色等，非常适合于自动生成报告。</p><p>2.代码结构设计</p><p>代码结构设计遵循”单一职责原则”，即每一个功能模块、类或方法只负责完成一项任务。比如我们的<code>load_data</code>方法专门负责加载数据，<code>generate_report</code>方法专门负责生成报告。这种设计使得我们的代码具有高内聚、低耦合的特性，非常易于阅读和维护。</p><p>同时，这种设计还能帮助我们更好地进行单元测试。每个模块、类或方法只做一件事，测试就会更容易、更有效，大大提高了代码质量。</p><p>3.错误处理和提示</p><p>在数据处理过程中，所有可能会产生错误的操作都有相应的错误处理和提示。例如，读取文件时，如果文件路径错误或者文件格式不正确，程序会捕获到这个错误，并弹出友好的错误提示。</p><p>我们利用Python的异常处理机制，对可能出错的代码进行了包装。如果出现错误，会抛出异常，并在外层进行捕获和处理。</p><p>同时，我们还设计了友好的用户提示信息。比如，当用户尝试打开一个不存在的文件时，会弹出”文件不存在”的错误提示，当用户尝试打开一个格式不正确的文件时，会弹出”文件格式不正确”的错误提示。这样的设计，不仅使得我们的程序更加健壮，也提高了用户体验。</p><p>4.利用<code>PyQt6</code>的信号和槽机制</p><p>在设计用户交互时，我们充分利用了PyQt6的信号和槽机制。信号和槽是<code>PyQt6</code>中一种重要的机制，它实现了对象之间的通信。信号可以在某个事件发生时被发出，而槽可以被任何对象的信号连接，从而在信号发出时执行。</p><p>我们的每个功能按钮，都连接了一个槽函数，当用户点击按钮时，对应的槽函数就会被执行，完成相应的功能。比如，我们的”加载数据”按钮连接了<code>load_data</code>方法，”生成报告”按钮连接了<code>generate_report</code>方法。</p><p>此外，我们还利用信号和槽实现了数据的实时预览。当数据加载完成或筛选后，会发出一个信号，这个信号连接了一个槽函数，用于在界面上显示数据。这样，用户在操作过程中，可以实时看到数据的变化。</p><p>5.数据加载和报告生成的异步处理</p><p>为了避免在数据加载和报告生成等耗时操作执行期间，界面变得无响应，我们采用了异步处理的方法。</p><p>具体来说，我们使用了QThread类，创建了一个新的线程来执行耗时操作。当用户点击”加载数据”或”生成报告”按钮时，新线程就会开始运行，而主线程（也就是用户界面）则可以继续响应用户的操作。</p><p>在新线程运行的过程中，我们还设置了一个进度条，用于显示操作的完成进度。这个进度条通过信号和槽与新线程的操作同步，当新线程完成一部分操作时，进度条就会更新。这样，用户就可以清楚地了解操作的执行情况。</p><p>6.利用<code>Openpyxl</code>操作<code>Excel</code></p><p><code>Openpyxl</code>库为我们提供了丰富的<code>Excel</code>操作<code>API</code>，包括读取、修改和写入等。我们使用这些<code>API</code>，可以方便地在<code>Python</code>程序中操作<code>Excel</code>文件。</p><p>当我们需要生成报告时，首先会创建一个新的<code>Excel</code>文件，然后根据数据内容，使用<code>Openpyxl</code>的<code>API</code>往文件中写入数据。在写入数据的同时，我们还可以应用各种样式，如设置字体、背景色等，使得生成的报告更加美观。</p><p>在整个操作过程中，我们只需要调用<code>Openpyxl</code>的<code>API</code>，而无需关心具体的<code>Excel</code>操作细节，大大简化了我们的工作。</p><p>三.操作步骤</p><p>1.运行软件<br>在Anaconda Powershell Prompt环境下，运行python main.py，结果如图。</p><p><img src="https://files.mdnice.com/user/38447/a498ac50-8455-451d-8b00-73606c2b5e1b.png"></p><p>2.下载邮件、解压缩文件<br>点击“下载邮件、解压缩文件”按钮(QPushButton)，调用get_mail()函数，通过imap_tools库，直接访问126邮箱的imap服务器，收取邮件及附件，把zip格式的附件解压缩在程序运行目录。</p><p><img src="https://files.mdnice.com/user/38447/64eec23f-21d3-4161-90be-7f3f59ad98d2.png"></p><p>3.选择文件<br>选择最新一期反馈文件（选择文件），加载文件，经过筛选，把黑龙江省需要反馈的文件都集中展示在这个列表中。根据选择文件的信息，自动更新监控数据的起始日期。</p><p><img src="https://files.mdnice.com/user/38447/b396ba23-75ba-4305-a311-eecbae39aa14.png"></p><p><img src="https://files.mdnice.com/user/38447/235aa979-04b2-45d4-998f-64c3b8b362b9.png"></p><p>4.生成报告<br>选择当天的值班人，所有值班人信息已填加到值班人列表里，流体、形变、电磁三个选项根据所出现需要反馈的测项进行选择，这个勾选结果，直接反应在生成报表的表头标题里。点“生成报告”，会根据反馈的台信息生成一个反馈报表，并直接用本地默认的excel软件自动打开预览，如果有需要修改的内容直接进行修改保存。</p><p><img src="https://files.mdnice.com/user/38447/4101c946-a41e-4940-a6b4-3c638d35da16.png"></p><p>经过以上操作，完成反馈报表制作，只需按要求发送出去，就可以了。</p><p>四.代码方面</p><p>上面两行布局，<code>QPushButton</code>+<code>QLineEdit</code>+<code>QDateEdit</code>+<code>QFileDialog</code>+<code>QCheckBox</code>+<code>QComboBox</code>，PyQt6的插件用上了几个。</p><p>加载文件时，把文件名的后17位，就是开始和结束的时间，加载文件时，直接把这个时间显示在开始和结束<code>QDateEdit</code>里，填表日期就是当天的日期，填表人，通过<code>QComboBox</code>一次都填加上去。</p><p>后面那三个选项主要是为了在生成表头时，要有这三个项的分类，一项、二项还是三项，最后三个选项内容出现在表头名字，中文名之后，日期之前的位置。</p><p>加载时默认表格头显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.table_widget = QTableWidget()</span><br><span class="line">        self.table_widget.setColumnCount(17)</span><br><span class="line">        self.table_widget.setHorizontalHeaderLabels([&#x27;数据日期&#x27;, &#x27;单位&#x27;, &#x27;台站代码&#x27;, &#x27;台站名称&#x27;, &#x27;测点号&#x27;, &#x27;仪器ID&#x27;, &#x27;仪器名称&#x27;, &#x27;测项分量名称&#x27;, &#x27;测项分量代码&#x27;, &#x27;观测日志记录&#x27;, &#x27;预处理质量问题要点描述&#x27;, &#x27;问题时段&#x27;, &#x27;问题解决办法或建议&#x27;, &#x27;问题解决时限&#x27;, &#x27;备  注&#x27;, &#x27;区域中心反馈情况&#x27;, &#x27;确认反馈&#x27;])</span><br></pre></td></tr></table></figure><p>生成报告内容主要通过<code>openpyxl</code>一行一行写的，包括行的列的合并，几列合并，字体大小，居中与否，列宽，都是通过代码调用<code>openpyxl</code>来实现的。</p><p>筛选出的结果存在一个pandas的dataframe里，写入时，按行一个一个写入到<code>openpyxl.Workbook()</code>的对象里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 设置字体和对齐方式</span><br><span class="line">       font = Font(size=9)</span><br><span class="line">       bold_font = Font(bold=True,size=9)</span><br><span class="line">       center_alignment = Alignment(horizontal=&#x27;center&#x27;, vertical=&#x27;center&#x27;)</span><br><span class="line"></span><br><span class="line">       # 设置边框</span><br><span class="line">       thin_border = Border(left=Side(style=&#x27;thin&#x27;), </span><br><span class="line">                           right=Side(style=&#x27;thin&#x27;), </span><br><span class="line">                           top=Side(style=&#x27;thin&#x27;), </span><br><span class="line">                           bottom=Side(style=&#x27;thin&#x27;))</span><br><span class="line"></span><br><span class="line">       # 添加头部信息</span><br><span class="line">       ss = f&quot;黑龙江地球物理台网数据质量监控反馈表(&#123;xuanxiang&#125;)&#123;result&#125;&quot;</span><br><span class="line">       headers = [ss]</span><br><span class="line">       ws.append(headers)</span><br><span class="line">       ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=17)</span><br><span class="line">       ws[&#x27;A1&#x27;].font = bold_font</span><br><span class="line">       ws[&#x27;A1&#x27;].alignment = center_alignment</span><br><span class="line"></span><br><span class="line">       date_row = [f&quot;监控数据日期：&#123;result17&#125;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, f&quot;填表日期：&#123;date_string&#125;&quot;, &quot;&quot;, &quot;&quot;, f&quot;填表人：&#123;selected_p&#125;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</span><br><span class="line">       ws.append(date_row)</span><br><span class="line">       ws.merge_cells(start_row=2, start_column=1, end_row=2, end_column=4)</span><br><span class="line">       ws.merge_cells(start_row=2, start_column=5, end_row=2, end_column=7)</span><br><span class="line">       ws.merge_cells(start_row=2, start_column=8, end_row=2, end_column=11)</span><br><span class="line">       for col in [&#x27;A&#x27;, &#x27;E&#x27;, &#x27;H&#x27;]:</span><br><span class="line">           ws[col+&#x27;2&#x27;].font = bold_font</span><br><span class="line">           ws[col+&#x27;2&#x27;].alignment = center_alignment</span><br><span class="line"></span><br><span class="line">       # 设置列宽</span><br><span class="line">       col_widths = [8.36, 8, 8, 11.09, 6, 11.09, 8, 13, 7, 25, 35, 8.36, 11.09, 11, 8, 15, 8]</span><br><span class="line">       for i, width in enumerate(col_widths):</span><br><span class="line">           col_letter = openpyxl.utils.get_column_letter(i+1)</span><br><span class="line">           ws.column_dimensions[col_letter].width = width</span><br></pre></td></tr></table></figure><p>大概就是这样吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PyQt6小软件–基于Python的地球物理台网数据质量监控周报报自动化处理与生成反馈报表&lt;/p&gt;
&lt;p&gt;基于&lt;code&gt;Python&lt;/code&gt;、&lt;code&gt;PyQt6&lt;/code&gt;和&lt;code&gt;Openpyxl&lt;/code&gt;开发的地球物理台网数据质量监控周报自动化处理</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E4%B9%8B%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E4%B9%8B%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2/</id>
    <published>2023-12-29T14:01:07.035Z</published>
    <updated>2023-05-29T09:13:37.621Z</updated>
    
    <content type="html"><![CDATA[<p>上次做了  <a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></p><p>实现一个简单的功能，ping列表的内容，把ping结果展示，ping不通时会有声音提示。<br><img src="https://mmbiz.qpic.cn/mmbiz_png/HbAkIiaswicK6cMSBL07t5UQyYI5F3zmrzxIs8Dy7ydomUPSm3t4CylP3Qv1IpGHlQkYuhnUoDNHV3xl6qTm6Rjw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>这个页面是<code>QWidget</code>页面，不能提供更多的窗口和功能，今天把<code>QWidget</code>改成<code>QMainWindow</code>，<code>QMainWindow</code>可以增加菜单，和状态栏等功能，可以在窗口内加<code>QWidget</code>页面。在此窗口基础上，添加几个页面，底部几个按钮(<code>PushButton</code>)相当于页面标签，进行切换使用。下面的三个按钮，只有第一个做了关联，其他两个按钮直接显示一个标签(<code>QLabel</code>)，实现后大概如图：</p><p><img src="https://files.mdnice.com/user/38447/402139b0-5719-4aa5-a519-85117e446188.png"></p><p><img src="https://files.mdnice.com/user/38447/2b6810ee-3e68-4e8d-b7fd-c3e970ae12dd.png"></p><p><img src="https://files.mdnice.com/user/38447/86bab1b4-ea85-4974-8c99-b1b30c9609a3.png"></p><p>页面切换使用<code>QStackedWidget</code>,<code>QStackedWidget</code>可以填中多个页面，通过<code>setCurrentIndex(0)</code>来设置激活那个页面。每一个页面的按钮不能共用，实际上是三个页面，每个页面有3个按钮，每个页面有2个按钮的动作做了关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">self.button1_2.clicked.connect(self.show_layout2)</span><br><span class="line">self.button1_3.clicked.connect(self.show_layout3)</span><br><span class="line"></span><br><span class="line">self.button2_1.clicked.connect(self.show_layout1)</span><br><span class="line">self.button2_3.clicked.connect(self.show_layout3)</span><br><span class="line"></span><br><span class="line">self.button3_1.clicked.connect(self.show_layout1)</span><br><span class="line">self.button3_2.clicked.connect(self.show_layout2)</span><br></pre></td></tr></table></figure><p>切换页面代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def show_layout1(self):</span><br><span class="line">    self.central_widget.setCurrentIndex(0)</span><br><span class="line">    self.statusBar().showMessage(&#x27;仪器设备连通扫描&#x27;)</span><br></pre></td></tr></table></figure><p>实现这个功能应该有更好的方案，这个也不算是正经的页面标签页。为了实现这个功能，重复代码一堆。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">self.central_widget = QStackedWidget()</span><br><span class="line">self.setCentralWidget(self.central_widget)</span><br><span class="line"></span><br><span class="line">self.layout1 = QVBoxLayout()</span><br><span class="line">self.layout2 = QVBoxLayout()</span><br><span class="line">self.layout3 = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">self.widget1 = QWidget()</span><br><span class="line">self.widget2 = QWidget()</span><br><span class="line">self.widget3 = QWidget()</span><br><span class="line"></span><br><span class="line">self.widget1.setLayout(self.layout1)</span><br><span class="line">self.widget2.setLayout(self.layout2)</span><br><span class="line">self.widget3.setLayout(self.layout3)</span><br><span class="line"></span><br><span class="line">self.central_widget.addWidget(self.widget1)</span><br><span class="line">self.central_widget.addWidget(self.widget2)</span><br><span class="line">self.central_widget.addWidget(self.widget3)</span><br></pre></td></tr></table></figure><p>layout1、2、3对应这三个页面，后面再写代码，填另组件，直接填加即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.layout1.addWidget(self.table_widget)</span><br><span class="line">self.layout1.addLayout(hbox_layout1)</span><br></pre></td></tr></table></figure><p>另外我还想实现些汇图功能，可能通过PyQt6与Matplotlib结合，实现绘图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from PyQt6 import (</span><br><span class="line">    QtCore,</span><br><span class="line">    QtWidgets,</span><br><span class="line">)  # import PyQt6 before matplotlib</span><br><span class="line"></span><br><span class="line">import matplotlib</span><br><span class="line">import pandas as pd</span><br><span class="line">from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg</span><br><span class="line">from matplotlib.backends.backend_qtagg import (</span><br><span class="line">    NavigationToolbar2QT as NavigationToolbar,</span><br><span class="line">)</span><br><span class="line">from matplotlib.figure import Figure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matplotlib.use(&quot;QtAgg&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MplCanvas(FigureCanvasQTAgg):</span><br><span class="line">    def __init__(self, parent=None, width=5, height=4, dpi=100):</span><br><span class="line">        fig = Figure(figsize=(width, height), dpi=dpi)</span><br><span class="line">        self.axes = fig.add_subplot(111)</span><br><span class="line">        super().__init__(fig)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MainWindow(QtWidgets.QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">        # Create the maptlotlib FigureCanvasQTAgg object,</span><br><span class="line">        # which defines a single set of axes as self.axes.</span><br><span class="line">        sc = MplCanvas(self, width=5, height=4, dpi=100)</span><br><span class="line"></span><br><span class="line">        # Create our pandas DataFrame with some simple</span><br><span class="line">        # data and headers.</span><br><span class="line">        df = pd.DataFrame(</span><br><span class="line">            [</span><br><span class="line">                [0, 10],</span><br><span class="line">                [5, 15],</span><br><span class="line">                [2, 20],</span><br><span class="line">                [15, 25],</span><br><span class="line">                [4, 10],</span><br><span class="line">            ],</span><br><span class="line">            columns=[&quot;A&quot;, &quot;B&quot;],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        # plot the pandas DataFrame, passing in the</span><br><span class="line">        # matplotlib Canvas axes.</span><br><span class="line">        df.plot(ax=sc.axes)</span><br><span class="line"></span><br><span class="line">        # Create toolbar, passing canvas as first parameter, parent (self, the MainWindow) as second.</span><br><span class="line">        toolbar = NavigationToolbar(sc, self)</span><br><span class="line"></span><br><span class="line">        layout = QtWidgets.QVBoxLayout()</span><br><span class="line">        layout.addWidget(toolbar)</span><br><span class="line">        layout.addWidget(sc)</span><br><span class="line"></span><br><span class="line">        # Create a placeholder widget to hold our toolbar and canvas.</span><br><span class="line">        widget = QtWidgets.QWidget()</span><br><span class="line">        widget.setLayout(layout)</span><br><span class="line">        self.setCentralWidget(widget)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">w = MainWindow()</span><br><span class="line">app.exec()</span><br></pre></td></tr></table></figure><p><img src="https://files.mdnice.com/user/38447/b8f71eb1-abb5-430d-bf39-58a82833efae.png"></p><p>有了这些基础，还有更多玩法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上次做了  &lt;a href=&quot;https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA&quot;&gt;Python PyQt6设计图形界面，实现一个简单的ping功能小软件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实现一个简单的功能，ping列表的内容，把pin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E4%B9%8B%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8%E5%92%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E4%B9%8B%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8%E5%92%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</id>
    <published>2023-12-29T14:01:07.033Z</published>
    <updated>2023-05-30T14:43:49.322Z</updated>
    
    <content type="html"><![CDATA[<p><code>QGridLayout</code>与<code>QHBoxLayout</code>和<code>QVBoxLayout</code>类似，相当于一个风格布局容器，可以生成一个几行几列的布局。比如生成一个5行4列布局，每行加上一按钮，几行代码可以实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># file: calculator.py</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">ZetCode PyQt6 tutorial</span><br><span class="line"></span><br><span class="line">In this example, we create a skeleton</span><br><span class="line">of a calculator using QGridLayout.</span><br><span class="line"></span><br><span class="line">Author: Jan Bodnar</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys,PyQt6</span><br><span class="line">from PyQt6.QtWidgets import (QWidget, QGridLayout,</span><br><span class="line">        QPushButton, QApplication)</span><br><span class="line"></span><br><span class="line">class Example(QWidget):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    def initUI(self):</span><br><span class="line"></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        self.setLayout(grid)</span><br><span class="line"></span><br><span class="line">        names = [&#x27;Cls&#x27;, &#x27;Bck&#x27;, &#x27;&#x27;, &#x27;Close&#x27;,</span><br><span class="line">                 &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;/&#x27;,</span><br><span class="line">                 &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;*&#x27;,</span><br><span class="line">                 &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;-&#x27;,</span><br><span class="line">                 &#x27;0&#x27;, &#x27;.&#x27;, &#x27;=&#x27;, &#x27;+&#x27;]</span><br><span class="line"></span><br><span class="line">        positions = [(i, j) for i in range(5) for j in range(4)]</span><br><span class="line"></span><br><span class="line">        for position, name in zip(positions, names):</span><br><span class="line"></span><br><span class="line">            if name == &#x27;&#x27;:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            button = QPushButton(name)</span><br><span class="line">            grid.addWidget(button, *position)</span><br><span class="line">        #self.resize(900, 600)</span><br><span class="line">        self.move(600, 300)</span><br><span class="line">        self.setWindowTitle(&#x27;简易计算器&#x27;)</span><br><span class="line">        self.setWindowIcon(PyQt6.QtGui.QIcon(&quot;logo.jpg&quot;))</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec())</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://files.mdnice.com/user/38447/8e3739f6-f526-408f-ab20-48024eef2c17.png"></p><p>显示的内容，可以在初始化按钮时直接带上，<code>QPushButton(&quot;选择文件&quot;)</code>，这里是把<code>names</code>列表内容做一系列按钮的显示内容，位置信息可以是依次填充，也可以给出行列位置进行填充。这里是一个<code>QWidget</code>，如果是<code>QMainWindow</code>，可把这些按钮与其响应绑定，按下的数字，在状态栏上显示，或者单独设置一个LineEdit进行内容显示，然后进行简易的计算。</p><p>下面这个例子，是<code>QGridLayout</code>6行2列，分别加上<code>QLable</code>和<code>LineEdit</code>，就是简易的发邮件程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># file: review.py</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">ZetCode PyQt6 tutorial</span><br><span class="line"></span><br><span class="line">In this example, we create a bit</span><br><span class="line">more complicated window layout using</span><br><span class="line">the QGridLayout manager.</span><br><span class="line"></span><br><span class="line">Author: Jan Bodnar</span><br><span class="line">Website: zetcode.com</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys,PyQt6</span><br><span class="line">from PyQt6.QtWidgets import (QWidget, QLabel, QLineEdit,QPushButton,</span><br><span class="line">        QTextEdit, QGridLayout, QApplication)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Example(QWidget):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def initUI(self):</span><br><span class="line"></span><br><span class="line">        title = QLabel(&#x27;标题&#x27;)</span><br><span class="line">        author = QLabel(&#x27;收件人&#x27;)</span><br><span class="line">        review = QLabel(&#x27;内容&#x27;)</span><br><span class="line"></span><br><span class="line">        titleEdit = QLineEdit()</span><br><span class="line">        authorEdit = QLineEdit()</span><br><span class="line">        reviewEdit = QTextEdit()</span><br><span class="line">        b = QPushButton(&quot;发送&quot;)</span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(12)</span><br><span class="line"></span><br><span class="line">        grid.addWidget(title, 1, 0)</span><br><span class="line">        grid.addWidget(titleEdit, 1, 1)</span><br><span class="line"></span><br><span class="line">        grid.addWidget(author, 2, 0)</span><br><span class="line">        grid.addWidget(authorEdit, 2, 1)</span><br><span class="line"></span><br><span class="line">        grid.addWidget(review, 3, 0)</span><br><span class="line">        grid.addWidget(reviewEdit, 3, 1, 5, 1)</span><br><span class="line">        grid.addWidget(b, 6, 0)</span><br><span class="line">        self.setLayout(grid)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(300, 300, 350, 300)</span><br><span class="line">        self.setWindowIcon(PyQt6.QtGui.QIcon(&quot;logo.jpg&quot;))</span><br><span class="line">        self.setWindowTitle(&#x27;简易邮件程序&#x27;)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以前写过一个发邮件程序，申请一个163或者QQ邮箱的api key，通过上面的界面，把下面的代码与<code>QPushButton</code>绑定，就可以实现发邮件功能。<code>QPushButton</code>与代码绑定，self.b.clicked.connect(self.sent_email)，在类内部再加一个发邮件函数就可以搞定了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">smtp_server = &#x27;smtp.qq.com&#x27;</span><br><span class="line"></span><br><span class="line">html_msg = &quot;&quot;&quot;</span><br><span class="line">&lt;p&gt;尊敬的领导：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;这是黑龙江省*****************，请查收！&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建一个带附件的实例msg</span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg[&#x27;From&#x27;] = Header(&#x27;黑龙江省*********&#x27;)  # 发送者</span><br><span class="line">msg[&#x27;To&#x27;] = Header(&#x27;办公室、****司、*****司&#x27;)  # 接收者</span><br><span class="line">subject = &#x27;黑龙江省**********专报&#x27;</span><br><span class="line">msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)  # 邮件主题</span><br><span class="line"># 邮件正文内容</span><br><span class="line">msg.attach(MIMEText(html_msg, &#x27;html&#x27;, &#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">att = MIMEBase(&#x27;application&#x27;, &#x27;octet-stream&#x27;)</span><br><span class="line">att.set_payload(open(filename1, &#x27;rb&#x27;).read())</span><br><span class="line">att.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=(&#x27;gbk&#x27;, &#x27;&#x27;, filename) )</span><br><span class="line">encoders.encode_base64(att)</span><br><span class="line"></span><br><span class="line">msg.attach(att)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    smtpobj = smtplib.SMTP_SSL(smtp_server)</span><br><span class="line">    smtpobj.connect(smtp_server, 465)    # 建立连接--qq邮箱服务和端口号</span><br><span class="line">    smtpobj.login(from_addr, password)   # 登录--发送者账号和口令</span><br><span class="line">    smtpobj.sendmail(from_addr, to_addr, msg.as_string())</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    print(&quot;邮件发送成功&quot;)</span><br><span class="line">    time.sleep(30)</span><br><span class="line">except smtplib.SMTPException:</span><br><span class="line">    print(&quot;无法发送邮件&quot;)</span><br><span class="line">finally:</span><br><span class="line">    # 关闭服务器</span><br><span class="line">    smtpobj.quit()</span><br></pre></td></tr></table></figure><p>python代码后台运行效率比较高，可以神不知鬼不觉就把事给办了，总感觉有点low，加上图形界面，似乎好那么一点儿。</p><p>显卡之父黄老板在某大演讲，有这么几条：</p><blockquote><ol><li>We are at the beginning of a major technological era: “Like PC, internet, mobile and cloud, but AI is far more fundamental”  </li><li>我们正处于一个重大技术时代的开端： “就像 PC、互联网、移动和云一样，但人工智能更为根本”</li></ol></blockquote><blockquote><ol start="2"><li>AI will create new jobs that didn’t exist before: “Like prompt engineering, AI Factory ops, and AI safety engineers.”<br>2.AI 将创造以前不存在的新工作： “比如快速工程、人工智能工厂运营和人工智能安全工程师。”</li></ol></blockquote><blockquote><ol start="3"><li>AI will change every job: “Supercharging the performance of programmers, designers, artists, marketers, and manufacturing planners”<br>3.AI 将改变每一份工作： “提高程序员、设计师、艺术家、营销人员和制造规划人员的绩效”</li></ol></blockquote><blockquote><ol start="4"><li>You must learn to take advantage of AI: “While some worry AI may take their jobs, someone who is expert with AI will”  </li><li>你必须学会利用人工智能： “虽然有些人担心人工智能可能会抢走他们的工作，但人工智能专家会”</li></ol></blockquote><blockquote><ol start="5"><li>Overall, AI software has opened multi-trillion dollar opportunities: “The world was simpler when I graduated college”  </li><li>总体而言，人工智能软件已经开辟了数万亿美元的机会： “大学毕业时，世界更简单”</li></ol></blockquote><blockquote><ol start="6"><li>Nvidia’s purpose: “To help the Einstein and DaVinci’s of our time do their life’s work”  </li><li>英伟达的宗旨： “帮助我们这个时代的爱因斯坦和达芬奇完成他们一生的工作”</li></ol></blockquote><blockquote><ol start="7"><li>Nvidia almost died in its first years: Jensen had to call the CEO of Sega and say “that they had to find another partner (because our tech failed) but I needed Sega to pay us in whole or Nvidia would be out of business”  </li><li>英伟达在最初的几年几乎死了： 詹森不得不打电话给世嘉的首席执行官说：“他们必须找到另一个合作伙伴（因为我们的技术失败了），但我需要世嘉全额支付我们，否则英伟达就会倒闭。</li></ol></blockquote><blockquote><ol start="8"><li>Humility abut his weakness led to his success: Flying to Taiwan and working with Morris Chang on production (where Nvidia was weak) enabled their position today 25 years later  </li><li>谦卑与他的软弱导致了他的成功： 飞往台湾并与 Morris Chang 合作进行生产（英伟达在英伟达的实力较弱的地方）使他们在 25 年后获得了今天的地位。</li></ol></blockquote><blockquote><ol start="9"><li>Nvidia had to endure years of $1B market cap: Because they were investing in CUDA that created the base for the applications on top of GPUs like blockchain and AI  </li><li>英伟达不得不忍受多年的10亿美元市值：因为他们正在投资CUDA，为区块链和人工智能等 GPU 之上的应用程序奠定了基础。</li></ol></blockquote><blockquote><ol start="10"><li>Alexnet, trained on GPUs of Nvidia, in 2012 started the big bang of AI; Nvidia risked everything by doubling down on it and deep learning.  </li><li>Alexnet，在英伟达的 GPU 上接受培训，在 2012 年开始了人工智能的大爆炸； 英伟达冒着一切风险，加倍投入和深度学习。</li></ol></blockquote><blockquote><ol start="11"><li>Sacrificing the profitable mobile market setup the AI opportunity: Nvidia had to leave a profitable business to focus on AI and robotics.  </li><li>牺牲有利可图的移动市场设置人工智能机会： 英伟达不得不离开盈利的业务，专注于人工智能和机器人技术。</li></ol></blockquote><blockquote><ol start="12"><li>We are the starting line of AI: “Every industry will be revolutionized…Run after it” And why was he at the night market? “Either you are running for food, or you are… food.”  </li><li>我们是人工智能的起跑线： “每个行业都将发生革命性的变化…… 追着它跑” 他为什么会出现在夜市？ “要么你是在为食物而奔跑，要么你…… 食物。</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;QGridLayout&lt;/code&gt;与&lt;code&gt;QHBoxLayout&lt;/code&gt;和&lt;code&gt;QVBoxLayout&lt;/code&gt;类似，相当于一个风格布局容器，可以生成一个几行几列的布局。比如生成一个5行4列布局，每行加上一按钮，几行代码可以实现。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-12-29T14:01:07.032Z</published>
    <updated>2023-08-03T05:25:11.861Z</updated>
    
    <content type="html"><![CDATA[<p>这几天学习PyQt6，PyQt6 是一个用于创建图形用户界面（GUI）应用程序的 Python 库，它提供了对 Qt 框架的完整绑定和封装。Qt 是一个功能强大、跨平台的 C++ 应用程序开发框架，被广泛用于开发跨平台的 GUI 应用程序。</p><ul><li><p>PyQt6库允许开发人员使用Python语言创建丰富、交互式的GUI应用程序，具有各种功能和特性。以下是PyQt6的一些主要特点和优势：</p></li><li><p>跨平台支持：PyQt6支持多个平台，包括Windows、macOS、Linux和其他一些操作系统。这意味着您可以使用相同的代码基础轻松地在不同的操作系统上构建应用程序。</p></li><li><p>强大的GUI控件：PyQt6提供了大量的Qt控件和小部件，包括按钮、标签、文本框、列表框、表格、菜单等等。这些控件使开发人员能够创建各种界面元素来满足应用程序的需求。</p></li><li><p>丰富的功能和特性：PyQt6提供了许多功能和特性，包括布局管理、事件处理、信号与槽机制、动画效果、绘图、多线程支持、数据库访问等等。这些功能使开发人员能够构建复杂和功能丰富的应用程序。</p></li><li><p>可扩展性：PyQt6是一个灵活的库，它允许开发人员根据需要进行自定义和扩展。您可以使用Qt的底层功能和API，编写自己的定制控件和功能。</p></li><li><p>文档和社区支持：PyQt6拥有详细的文档和丰富的社区支持，这使得学习和使用PyQt6变得更加容易。您可以在文档中找到大量的示例代码、教程和指南，以及在社区中获得帮助和支持。</p></li></ul><p>前几天转发了一个PyQt6的开发的一个小例子。</p><p><img src="https://files.mdnice.com/user/38447/21c222c0-f44e-4771-bc76-6451d05401bc.png"></p><p>这几天也在加紧学习。PyQt6安装比较简单，便于打包程序，可以单独建立个虚拟环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create --name PyQt6 python=3.9</span><br><span class="line">pip install PyQt6</span><br><span class="line">pip install pyqt6-tools</span><br></pre></td></tr></table></figure><p>PyQt6-tools安装好后，会有一个Qt Designer设计器，可以拖动进行简单的界面设计，再通过pyuic6.exe这个程序把设计好的ui界面转化成py代码，在这些代码的基础上就可以实现有图形界面的python代码开发了。</p><p><img src="https://files.mdnice.com/user/38447/c99f7c78-e292-47e5-bd1b-0deb6d146aee.png"></p><p>比如设计这样一个界面：</p><p><img src="https://files.mdnice.com/user/38447/d8339a72-d344-4c51-aee6-cbed30caf9d4.png"></p><p>把设计好的界面保存成ColorD.ui，通过pyuic6.exe把ui转化成py代码。搜索pyuic6.exe文件的位置，把这个路径加入到系统path。在cmd命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic6 -x ColorD.ui -o ColorD.py</span><br></pre></td></tr></table></figure><p>转好的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">from PyQt6 import QtCore, QtGui, QtWidgets</span><br><span class="line">from PyQt6.QtWidgets import QColorDialog,QFontDialog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ui_Form(object):</span><br><span class="line">    def setupUi(self, Form):</span><br><span class="line">        Form.setObjectName(&quot;Form&quot;)</span><br><span class="line">        Form.resize(400, 300)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(Form)</span><br><span class="line">        self.verticalLayout.setObjectName(&quot;verticalLayout&quot;)</span><br><span class="line">        self.textEdit = QtWidgets.QTextEdit(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(14)</span><br><span class="line">        self.textEdit.setFont(font)</span><br><span class="line">        self.textEdit.setObjectName(&quot;textEdit&quot;)</span><br><span class="line">        self.verticalLayout.addWidget(self.textEdit)</span><br><span class="line">        self.horizontalLayout = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout.setObjectName(&quot;horizontalLayout&quot;)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(12)</span><br><span class="line">        self.pushButton.setFont(font)</span><br><span class="line">        self.pushButton.setObjectName(&quot;pushButton&quot;)</span><br><span class="line">        self.horizontalLayout.addWidget(self.pushButton)</span><br><span class="line">        self.pushButton.clicked.connect(self.ColorDialog)</span><br><span class="line">        self.pushButton_2 = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(12)</span><br><span class="line">        self.pushButton_2.setFont(font)</span><br><span class="line">        self.pushButton_2.setObjectName(&quot;pushButton_2&quot;)</span><br><span class="line">        self.pushButton_2.clicked.connect(self.fontDialog)</span><br><span class="line">        self.horizontalLayout.addWidget(self.pushButton_2)</span><br><span class="line">        self.verticalLayout.addLayout(self.horizontalLayout)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def ColorDialog(self):</span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        self.textEdit.setTextColor(color)</span><br><span class="line"></span><br><span class="line">    def fontDialog(self):</span><br><span class="line">        font,ok = QFontDialog.getFont()</span><br><span class="line">        if ok:</span><br><span class="line">            self.textEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">    def retranslateUi(self, Form):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(&quot;Form&quot;, &quot;Form&quot;))</span><br><span class="line">        self.pushButton.setText(_translate(&quot;Form&quot;, &quot;Color Dialog&quot;))</span><br><span class="line">        self.pushButton_2.setText(_translate(&quot;Form&quot;, &quot;Font Dialog&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    import sys</span><br><span class="line">    app = QtWidgets.QApplication( sys.argv)</span><br><span class="line">    Form = QtWidgets.QWidget()</span><br><span class="line">    ui = Ui_Form()</span><br><span class="line">    ui.setupUi(Form)</span><br><span class="line">    Form.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="https://files.mdnice.com/user/38447/18a180a8-0765-46b6-8bbf-8bab97941137.png"></p><p>我想做一个带有图形界面的一个Ping的程序，提前准备一个csv的ping列表，三列，前两是名称，第三列是ip，这个表启动程序自动加载，放入到到QTableWidget中，按一定时间间隔ping这些ip列表，把ping的结果放入到QLineEdit中显示，ping通的用绿色字显示，ping不通用红色字显示，并播放一个提示音。最后把Ping的结果总结一下，几通几不能。</p><p>设计好的界面如下，这个是直接用代码写的，不是用Qt Designer设计的。</p><p><img src="https://files.mdnice.com/user/38447/cf5a2a38-07e3-42b3-9fa9-e5519b31dfd2.png"></p><p>执行结果如图：</p><p><img src="https://files.mdnice.com/user/38447/0fa60edf-bac8-4c38-a4c8-07013163fc83.png"></p><p><img src="https://files.mdnice.com/user/38447/ba7d0552-bdbe-4590-a50b-a1f81d9f9f51.png"></p><p>代码方面，按钮QPushButton，与动作绑定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hbox_layout1 = QHBoxLayout()</span><br><span class="line">        self.scan_button = QPushButton(&quot;开始扫描&quot;)</span><br><span class="line">        self.scan_button.clicked.connect(self.start_scan)</span><br><span class="line">        hbox_layout1.addWidget(self.scan_button)</span><br></pre></td></tr></table></figure><p>加载QTableWidget的表，拖动窗口大小时，表格随拖动变化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">self.table_widget = QTableWidget()</span><br><span class="line">        self.table_widget.setColumnCount(3) </span><br><span class="line">        self.table_widget.setHorizontalHeaderLabels([&quot;台站名&quot;, &quot;测项名&quot;, &quot;IP地址&quot;])</span><br><span class="line">        self.table_widget.setRowCount(len(self.ip_list))</span><br><span class="line">        self.table_widget.cellChanged.connect(self.handle_cell_changed)</span><br><span class="line">        self.table_widget.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)</span><br><span class="line">        self.table_widget.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)</span><br><span class="line">        self.table_widget.setSelectionMode(QTableWidget.SelectionMode.MultiSelection)</span><br><span class="line"></span><br><span class="line">        for row, item in enumerate(self.ip_list):</span><br><span class="line">            station_name, measurement_name, ip = item</span><br><span class="line">            #self.table_widget.setItem(row, 0, QTableWidgetItem(str(row + 1)))  # 序号从1开始</span><br><span class="line">            self.table_widget.setItem(row, 0, QTableWidgetItem(station_name))</span><br><span class="line">            self.table_widget.setItem(row, 1, QTableWidgetItem(measurement_name))</span><br><span class="line">            self.table_widget.setItem(row, 2, QTableWidgetItem(&quot;10.23.*.*&quot;))</span><br><span class="line"></span><br><span class="line">        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)</span><br><span class="line">        self.table_widget.verticalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)</span><br><span class="line">        layout.addWidget(self.table_widget)</span><br></pre></td></tr></table></figure><p>这个软件功能比较简单，先运行几天，再填加新的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这几天学习PyQt6，PyQt6 是一个用于创建图形用户界面（GUI）应用程序的 Python 库，它提供了对 Qt 框架的完整绑定和封装。Qt 是一个功能强大、跨平台的 C++ 应用程序开发框架，被广泛用于开发跨平台的 GUI 应用程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%96%EF%BC%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%EF%BC%8C%E8%AF%BB%E5%8F%96%E6%89%B9%E5%AE%9A%E6%96%87%E4%BB%B6/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%96%EF%BC%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%EF%BC%8C%E8%AF%BB%E5%8F%96%E6%89%B9%E5%AE%9A%E6%96%87%E4%BB%B6/</id>
    <published>2023-12-29T14:01:07.030Z</published>
    <updated>2023-06-14T14:50:54.144Z</updated>
    
    <content type="html"><![CDATA[<p>本项任务涉及一份每周三定期发送到指定邮箱的数据汇总表格。邮件附件为一个 zip 压缩文件，内含两份资料：一份 doc 文档，以及一份 xlsx 的电子表格。</p><p>任务的核心内容是登录邮箱，下载并解压缩这份 zip 文件，随后打开并阅读 xlsx 电子表格。您需要特别注意的是关于黑龙江的相关信息，因为黑龙江地区有专属的联系人负责。</p><p>任务完成后，您需要根据所提取的黑龙江信息，找到对应的负责人。在确定负责人后，请使用企业微信发送提醒，以确保他们能及时处理相关事宜。</p><p>为了实现所需的功能，我们需要借助 126&#x2F;163&#x2F;QQ 邮箱的 IMAP 协议来收发邮件。首先，您需要登录您的邮箱，启动 IMAP 和 SMTP 的授权操作。在此过程中，您会获得一个一次性密码。最后，只需利用您的邮箱名和该一次性密码，就可以顺利通过 IMAP 协议收发邮件了。</p><p>为了实现IMAP邮件的接收与发送，我们需要利用<code>imap_tools</code>这个包，该包可以通过使用<code>pip</code>命令进行安装。<code>imap_tools</code>包的操作相当简单，只需要知道邮箱名和密码就可以进行相关操作。</p><p>以126邮箱的IMAP服务器为例，其地址是<code>imap.126.com</code>，无需填写端口号。由于这是一个用于工作的邮箱，发件人是固定的，因此我们可以通过指定发件人信息来缩小搜索范围。</p><p>对于邮件的主题 (subject) 匹配，我们可以使用re.search(pattern, msg.subject)来进行比对。一旦找到匹配项，那就是我们想要的邮件。之后，就可以进行邮件的下载与保存了。</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mail_pass = &#x27;***********&#x27; # 使用的qq邮箱发送邮件，为qq邮箱的授权码，非密码，可在网页的邮箱设置中开通,其它邮箱也类似</span><br><span class="line">sender = &#x27;123456@163.cn&#x27;</span><br><span class="line"></span><br><span class="line">pattern = r&quot;地球物理台网数据质量监控日报&quot;</span><br><span class="line">#result = re.search(pattern, string)</span><br><span class="line"></span><br><span class="line">with MailBox(&#x27;imap.126.com&#x27;).login(&#x27;67890@126.com&#x27;, mail_pass, &#x27;INBOX&#x27;) as mailbox:</span><br><span class="line"></span><br><span class="line">    # 从收件箱文件夹中获取邮件主题列表</span><br><span class="line">    #subjects = [msg.subject for msg in mailbox.fetch()]</span><br><span class="line">    for msg in mailbox.fetch():</span><br><span class="line">        result = re.search(pattern, msg.subject)</span><br><span class="line">        if result:</span><br><span class="line">            #print(&quot;字符串包含地球物理台网数据质量监控日报&quot;)</span><br><span class="line">            print(&quot;邮件主题:&quot;, msg.subject)</span><br><span class="line">            print(&quot;发件人:&quot;, msg.from_)</span><br><span class="line">            #print(&quot;收件人:&quot;, msg.to)</span><br><span class="line">            print(&quot;发送时间:&quot;, msg.date)</span><br><span class="line">            print(&quot;邮件正文:&quot;, msg.text)</span><br><span class="line">            for attachment in msg.attachments:</span><br><span class="line">                payload = attachment.payload</span><br><span class="line">                filename = attachment.filename</span><br><span class="line"></span><br><span class="line">                with open(filename, &#x27;wb&#x27;) as f:</span><br><span class="line">                    f.write(payload)</span><br><span class="line">                #print(&quot;保存附件:&quot;, filename)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            print(&quot;字符串不包含地球物理台网数据质量监控日报&quot;)</span><br></pre></td></tr></table></figure><p>这样一次下载多个文件，对这个zip文件进行解压缩。直接使用<code>zipfile</code>包即可。在这里<code>zipfile</code>包有一点问题，需要手动修改一下源文件。</p><p>找到<code>zipfile.py</code>这个文件，对两处编码信息进行修改。</p><p>第1376行 原内容 为 <code>filename = filename.decode(&#39;cp437&#39;)</code><br>修改为 <code>filename = filename.decode(&#39;GBK&#39;)</code> </p><p>1555行原内容为：<code>fname_str = fname.decode(&quot;cp437&quot;)</code><br>修改为<code>fname_str = fname.decode(&quot;GBK&quot;)</code></p><p>修改后，解压缩出来的文件名是正确的，不会出现乱码，我的python是3.10.11，可能是3.10的windows版都可能有这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for filename in os.listdir(directory):</span><br><span class="line">    if filename.endswith(&#x27;.zip&#x27;) :</span><br><span class="line">        zip_path = os.path.join(directory, filename)</span><br><span class="line">        </span><br><span class="line">        with zipfile.ZipFile(zip_path, &#x27;r&#x27;) as zip_ref:</span><br><span class="line">            for filename in zip_ref.namelist():</span><br><span class="line">                print(filename)</span><br><span class="line">                decoded_filename = filename.encode(&#x27;utf-8&#x27;).decode(&#x27;GBK&#x27;)</span><br><span class="line">                zip_ref.extract(filename, directory)</span><br><span class="line">                new_filename = directory + decoded_filename</span><br><span class="line">            </span><br><span class="line">        print(f&quot;解压缩文件: &#123;filename&#125;&quot;)</span><br></pre></td></tr></table></figure><p>至此，文件收取并解压缩，最后一步是展示。用PyQt6来个简单界面，自动加载最新的.xlsx文件，最后成这么个形态。</p><p><img src="https://files.mdnice.com/user/38447/9184756b-6686-4576-9b0d-7d64543d8f46.png"></p><p>用pandas读取.xlsx文件，进行筛选，把筛选的结果加载到<code>QTableWidget</code>，整体就这些吧。</p><p>界面方面可以简单优化一化，加几个按钮、选项等。</p><p>之前写的PyQt6相关内容：</p><ul><li><a href="https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g">Python PyQt6绘图解析 - PyQt6 GUI图形界面扫描ping程序简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g">Copilot免费实现ChatPDF功能，可上传PDF附件，对文章进行问答&#x2F;总结</a></li><li><a href="https://mp.weixin.qq.com/s/0bEDRh0TH62pmp5mTKij-A">PyQt6绘图兰勃特投影中国9段线&#x2F;10段线图，绘制nc等值线图，绘图代码GUI移植</a></li><li><a href="https://mp.weixin.qq.com/s/a7l65MU4wPww19ctiIwhsA">PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">Python PyQt6 设计图形界面，PyQt6 与 MatPlotlib 实现简易绘图小程序</a></li><li><a href="https://mp.weixin.qq.com/s/sA7Td18xswkChAIjBEF4_w">Python PyQt6 设计图形界面，QGridLayout实现一个简单的发邮件和简易计算小软件</a></li><li><a href="https://mp.weixin.qq.com/s/BwBJFyEBcFWcacwpaloCMg">Python PyQt6设计图形界面一点小改进，简单实现标签页面切换</a></li><li><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本项任务涉及一份每周三定期发送到指定邮箱的数据汇总表格。邮件附件为一个 zip 压缩文件，内含两份资料：一份 doc 文档，以及一份 xlsx 的电子表格。&lt;/p&gt;
&lt;p&gt;任务的核心内容是登录邮箱，下载并解压缩这份 zip 文件，随后打开并阅读 xlsx 电子表格。您需要特</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E7%AE%80%E5%8D%95%E7%BB%98%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E7%AE%80%E5%8D%95%E7%BB%98%E5%9B%BE%E8%A7%A3%E6%9E%90/</id>
    <published>2023-12-29T14:01:07.028Z</published>
    <updated>2023-06-06T14:21:31.089Z</updated>
    
    <content type="html"><![CDATA[<p>PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操</p><p><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">Python PyQt6设计图形界面，PyQt6与MatPlotlib实现简易绘图小程序</a>绘制出来结果如图。</p><p><img src="https://files.mdnice.com/user/38447/e29bb9c4-61b7-474f-b37b-fdb0c43efec6.png"></p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>选取的数据是时间序列，格式：</p><p><img src="https://files.mdnice.com/user/38447/f81231f2-403f-4599-b60b-dda2914ce55b.png"></p><p>年-月-日后面跟着24个数据，算是小时值吧，缺数为NULL，数据处理时，要把空值去除。</p><h2 id="绘图目标"><a href="#绘图目标" class="headerlink" title="绘图目标"></a>绘图目标</h2><p>本次绘图就是实现简单的数据求每天的平均，标准差，均方差，还可以统计最大，最小等。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>用pandas读入这个文件，一共25列，第一列为日期，通过<code>datetime</code>标出时间类型，其后的24个数据，转成numpy，通过Numpy来进行简单的求平均等操作。这些计算部分完成，把计算结果存成pandas的<code>dataframe</code>格式，命名df的列名，通过用列名，绘图时直接调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">with open(filename1,&quot;a&quot;) as f:</span><br><span class="line">    #f.write( &quot;ds,y&quot;  + &#x27;\n&#x27;)</span><br><span class="line">    with open (self.filename) as file_object:</span><br><span class="line">        lines = file_object.read().splitlines()#去除每行末尾的回车符</span><br><span class="line"></span><br><span class="line">    for line in lines:</span><br><span class="line">        ll = len(line.split())</span><br><span class="line"></span><br><span class="line">        dd = line.split()[0]</span><br><span class="line">        dd0 = dt.datetime.strptime(dd,&#x27;%Y-%m-%d&#x27;)</span><br><span class="line">        #print(str(dd0)[:10])</span><br><span class="line">        data = line.split()[1:ll]</span><br><span class="line">        lll = len(data)</span><br><span class="line"></span><br><span class="line">        if lll&gt;1:</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            num =[]</span><br><span class="line">            for n in data:</span><br><span class="line">                if n != &#x27;NULL&#x27;:</span><br><span class="line">                    num.append(float(n))</span><br><span class="line"></span><br><span class="line">            if num != []:</span><br><span class="line">                data_m =np.mean(num)</span><br><span class="line">                data_var = np.var(num)</span><br><span class="line">                data_std = np.std(num)</span><br><span class="line">                data_sum = np.sum(num)</span><br><span class="line">            #for i in range(0,ll-1):</span><br><span class="line">            #    nnn = dd0 + dt.timedelta(seconds = coefficient * i)</span><br><span class="line">            f.write(str(dd0)[:10]+&quot;,&quot;+ str(data_m) +&quot;,&quot;+ str(data_var) +&quot;,&quot;+ str(data_std)+ &quot;,&quot;+ str(data_sum)+ &#x27;\n&#x27;)</span><br></pre></td></tr></table></figure><p>上现代码封闭成一个函数，调用结束返回一个<code>dataframe</code>，在绘图时直接使用。</p><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><p><code>PyQt6</code>在<code>QWidget</code>中填加<code>QPushButton</code> <code>QLineEdit</code> <code>FigureCanvas</code>，加载时，<code>FigureCanvas</code>加载一张空白底图，绘图时，把加载的图层删除，用<code>FigureCanvas</code>和<code>Matplotlib</code>结合进行绘图，启动加载时，加入<code>self.fig = Figure()</code>，整个绘图都是在这个fig上绘制，再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.canvas = FigureCanvas(self.fig)</span><br><span class="line">self.layout.addWidget(self.canvas)</span><br></pre></td></tr></table></figure><p>这样就把绘好的图与<code>QWidget</code>，保存时，只需要通过<code>fig.savefig</code>进行保存。</p><p>整体就是这么操作的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA&quot;&gt;Python PyQt6设计图形界面，PyQt6与MatPlotlib实现简</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/pyqt6%E5%9F%BA%E4%BA%8EPython%20%E7%9A%84%E5%9C%B0%E7%90%83%E7%89%A9%E7%90%86%E5%8F%B0%E7%BD%91%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E7%9B%91%E6%8E%A7%E6%97%A5%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86%E4%B8%8E%E5%8F%8D%E9%A6%88%E7%94%9F%E6%88%90/"/>
    <id>http://cacity.live/2023/12/29/pyqt6%E5%9F%BA%E4%BA%8EPython%20%E7%9A%84%E5%9C%B0%E7%90%83%E7%89%A9%E7%90%86%E5%8F%B0%E7%BD%91%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E7%9B%91%E6%8E%A7%E6%97%A5%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86%E4%B8%8E%E5%8F%8D%E9%A6%88%E7%94%9F%E6%88%90/</id>
    <published>2023-12-29T14:01:07.027Z</published>
    <updated>2023-06-19T01:16:18.858Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E7%BB%98%E5%9B%BE%E7%AE%80%E6%98%93%E7%A8%8B%E5%BA%8F/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E7%BB%98%E5%9B%BE%E7%AE%80%E6%98%93%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-12-29T14:01:07.024Z</published>
    <updated>2023-05-31T08:39:21.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>前几天转发了<a href="https://mp.weixin.qq.com/s/F8cUutQZG607NRdzhqvm2w">当气象绘图碰上PyQt5</a></p><p>成品如图：<br><img src="https://files.mdnice.com/user/38447/dfd3bd59-ec3a-4915-bdc3-676dd1cba54d.png"></p><h1 id="今天任务"><a href="#今天任务" class="headerlink" title="今天任务"></a>今天任务</h1><p>今天主要任务就是复刻一个PyQt6绘图程序。主要功能是选择文件，把选择的文件在一个LineEdit中显示出来，这是一个特定的时间序列数据，把这个序列求平均，计算均方差，标准差，把平均值、均方差、标准差绘到一张图上。</p><p>一个WidGet上，填加按钮(<code>QPushButton</code>)、编辑框、和<code>FigureCanvas</code>,<code>FigureCanvas</code>做为Matplotlib的容器，绘图部分都是在Matplotlib中实现，最后把<code>Figure()</code>给回<code>FigureCanvas</code>，通过<code>Layout</code>的<code>addWidget</code>把那个容器当一个组件填加进来进行展示。绘图过程都是通过MatPlotlib实现，保存也是通过fig.save实现。整体就是这么一个思路。</p><h1 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h1><p>绘图是原来已有的代码改的，需要适配<code>PyQt6</code>。另外<code>addWidget</code>执行一次没问题，画完第一张图，再画第二张，会把原来的绘图区一分为二，再画一次分三份。找到原因后，看有没有<code>Canvas</code>这个组件，有就删除，没有就正常执行。</p><h1 id="最后看成品："><a href="#最后看成品：" class="headerlink" title="最后看成品："></a>最后看成品：</h1><p><img src="https://files.mdnice.com/user/38447/8077f9af-a551-4602-ac1d-266b569a9806.png"></p><h1 id="代码部分："><a href="#代码部分：" class="headerlink" title="代码部分："></a>代码部分：</h1><h2 id="按钮绑定"><a href="#按钮绑定" class="headerlink" title="按钮绑定"></a>按钮绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.o = QPushButton(&quot;选择文件&quot;)</span><br><span class="line">self.o.clicked.connect(self.choose_file)      </span><br><span class="line">self.textEdit = QLineEdit()</span><br><span class="line">self.b = QPushButton(&quot;绘图&quot;)</span><br><span class="line">self.b.clicked.connect(self.drawer)  </span><br><span class="line">self.save = QPushButton(&quot;保存图像&quot;)</span><br><span class="line">self.save.clicked.connect(self.save_fig)</span><br></pre></td></tr></table></figure><h2 id="选择文件"><a href="#选择文件" class="headerlink" title="选择文件"></a>选择文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def choose_file(self): </span><br><span class="line">    self.filename, filetype = PyQt6.QtWidgets.QFileDialog.getOpenFileName(None, &quot;选择文件&quot;,os.getcwd(),&quot;All Files(*);;Text Files(*.txt)&quot;)</span><br><span class="line">    self.textEdit.setText(self.filename)</span><br><span class="line">    self.path_to_df(&#x27;60&#x27;)</span><br><span class="line">    print(self.df)</span><br></pre></td></tr></table></figure><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def save_fig(self):</span><br><span class="line">    file_dialog = PyQt6.QtWidgets.QFileDialog()</span><br><span class="line">    file_name, _ = file_dialog.getSaveFileName(self, &quot;保存图像&quot;, &quot;&quot;, &quot;Images (*.png *.jpg)&quot;)</span><br><span class="line">    if file_name:</span><br><span class="line">        self.fig.savefig(file_name,dpi = 300,  bbox_inches=&#x27;tight&#x27;)</span><br></pre></td></tr></table></figure><h2 id="检查canvas是否存在"><a href="#检查canvas是否存在" class="headerlink" title="检查canvas是否存在"></a>检查canvas是否存在</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if hasattr(self, &#x27;canvas&#x27;):</span><br><span class="line">    self.layout.removeWidget(self.canvas)</span><br><span class="line">    self.canvas.close()</span><br><span class="line"></span><br><span class="line">self.canvas = FigureCanvas(self.fig)</span><br><span class="line">self.layout.addWidget(self.canvas)</span><br></pre></td></tr></table></figure><h1 id="PyQt6其他几篇"><a href="#PyQt6其他几篇" class="headerlink" title="PyQt6其他几篇"></a>PyQt6其他几篇</h1><p><a href="https://mp.weixin.qq.com/s/sA7Td18xswkChAIjBEF4_w">Python PyQt6 设计图形界面，QGridLayout实现一个简单的发邮件和简易计算小软件</a></p><p><a href="https://mp.weixin.qq.com/s/BwBJFyEBcFWcacwpaloCMg">Python PyQt6设计图形界面一点小改进，简单实现标签页面切换</a></p><p><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开头&quot;&gt;&lt;a href=&quot;#开头&quot; class=&quot;headerlink&quot; title=&quot;开头&quot;&gt;&lt;/a&gt;开头&lt;/h1&gt;&lt;p&gt;前几天转发了&lt;a href=&quot;https://mp.weixin.qq.com/s/F8cUutQZG607NRdzhqvm2w&quot;&gt;当气象绘</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E7%BB%98%E5%9B%BE-PyQt%20GUI/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E7%BB%98%E5%9B%BE-PyQt%20GUI/</id>
    <published>2023-12-29T14:01:07.022Z</published>
    <updated>2023-06-09T14:29:47.816Z</updated>
    
    <content type="html"><![CDATA[<p>上次改装了这个绘图<br><a href="https://mp.weixin.qq.com/s/a7l65MU4wPww19ctiIwhsA">PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操</a></p><p>今天在此基础上，在底图上绘制一个Lambert投影的中国10段线图。</p><p><img src="https://files.mdnice.com/user/38447/df3cb235-fc78-478a-af2e-64a6a5bbccf6.jpg"></p><p>这里所用的代码是用<br><a href="https://cloud.tencent.com/developer/article/1484887?from=article.detail.1618341">https://cloud.tencent.com/developer/article/1484887?from=article.detail.1618341</a></p><p>做了简单的修改。</p><p>这里所使用的库主要是<code>cartopy</code> <code>basemap</code>里，要运行这些代码，主要是要把几个库安装明白。</p><p>要安装的库有：</p><ul><li>proproj</li><li>pillow</li><li>pyshp</li><li>shapely</li><li>cartopy</li><li>netcdf4</li><li>xarrary</li><li>scipy</li><li>bottleneck</li><li>dask</li><li>GDAL</li><li>fiona</li><li>geopandas</li><li>basemap</li></ul><p>这里能离线下载的，都离线下载whl文件，比如系统是64位python3.10，直接下载64位3.10版的whl文件。</p><p>安装如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple basemap-1.3.3-cp310-cp310-win_amd64.whl</span><br></pre></td></tr></table></figure><p>如果有代理，挂上代理，安装过程能更快一点，找不到离线文件的，直接在安装，直接输入库名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple cartopy</span><br></pre></td></tr></table></figure><p>以上这些都安装好，此类的代码基本都可以跑起来，最好建立一个虚拟环境，如果有问题也不至于影响其他代码的运行环境。</p><p>代码部分，建立大图和子图，这个位置<code>add_axes([0.1, 0.05, 0.9, 0.9], projection=proj)</code>，后面跟的是图的位置和大小，位置信息(left,bottom,width,height)，其后是投影信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.fig = plt.figure(figsize=[10, 8],frameon=True)</span><br><span class="line"># Set projection and plot the main figure</span><br><span class="line">self.ax = self.fig.add_axes([0.1, 0.05, 0.9, 0.9], projection=proj)</span><br><span class="line">self.sub_ax = self.fig.add_axes([0.67, 0.06, 0.175, 0.20],</span><br><span class="line">     projection=ccrs.LambertConformal(central_latitude=90,</span><br><span class="line">     central_longitude=115))</span><br></pre></td></tr></table></figure><p>这里调用的省界和国界使用的gmt所用的边界文件。可以直接使用shp格式的省界。</p><p>又分别填加了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ax.add_feature(cfeature.OCEAN.with_scale(&#x27;50m&#x27;))</span><br><span class="line">ax.add_feature(cfeature.LAND.with_scale(&#x27;50m&#x27;))</span><br><span class="line">ax.add_feature(cfeature.RIVERS.with_scale(&#x27;50m&#x27;))</span><br><span class="line">ax.add_feature(cfeature.LAKES.with_scale(&#x27;50m&#x27;))</span><br></pre></td></tr></table></figure><p>这里底图是2018年2月1日平均温度，对数据做了mask处理，再用contourf绘制等值线。</p><p>让这个代码可以PyQt6上跑起来，把绘图过程写进<code>MyWindow(QWidget)</code>里，其中的一些定义好的函数，直接放在类外，直接调用。这个绘图是基于<code>matplotlib</code>的，把<code>fig</code>，<code>ax</code>，<code>sub_ax</code>填到加<code>self</code>。最后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.canvas = FigureCanvas(self.fig)</span><br><span class="line">self.layout.addWidget(self.canvas)</span><br></pre></td></tr></table></figure><p>保存时直接用<code>self.fig.savefig</code>保存，保存效果：</p><p><img src="https://files.mdnice.com/user/38447/d4f11442-869d-4610-9504-f0e36f065d95.jpg"></p><p>感觉做了点什么，又感觉只在原地没动。</p><p>后台回复：<strong>宝箱</strong>，有惊喜。</p><ul><li><a href="https://mp.weixin.qq.com/s/a7l65MU4wPww19ctiIwhsA">PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">Python PyQt6 设计图形界面，PyQt6 与 MatPlotlib 实现简易绘图小程序</a></li><li><a href="https://mp.weixin.qq.com/s/sA7Td18xswkChAIjBEF4_w">Python PyQt6 设计图形界面，QGridLayout实现一个简单的发邮件和简易计算小软件</a></li><li><a href="https://mp.weixin.qq.com/s/BwBJFyEBcFWcacwpaloCMg">Python PyQt6设计图形界面一点小改进，简单实现标签页面切换</a></li><li><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上次改装了这个绘图&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/a7l65MU4wPww19ctiIwhsA&quot;&gt;PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天在此基础上，在底图上绘制一个Lambe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%E7%BB%98%E5%9B%BE2/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%E7%BB%98%E5%9B%BE2/</id>
    <published>2023-12-29T14:01:07.021Z</published>
    <updated>2023-06-03T12:59:25.490Z</updated>
    
    <content type="html"><![CDATA[<p>前两天做了一个简易PyQt6绘图小程序</p><p><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">Python PyQt6设计图形界面，PyQt6与MatPlotlib实现简易绘图小程序</a></p><p>就是把普通的<code>Matplotlib</code>代码与<code>PyQt6</code>结合，一个有图形界面的绘图小程序。</p><p>今天看到<code>水文气象科研猫</code>关于<a href="https://mp.weixin.qq.com/s/CnKcHhaOpu96oBMd-NOBWQ">全球水深地形高程数据集ETOPO 2022</a>，现学现卖，把绘图程序做了些修改，与PyQt6集成。</p><p>本次在上次绘图基础上，做了小修改。未加载Canvs时，上面一行QHBoxLayout，向下跑。本次直接启动时加载一张白色底图，让这个位置固定，此图大小与plt子图大小相同，绘图后感觉不出换了底图。手动调节plt图各边的距离，修改标注字的大小。本来想做一个绘制nc格式的等值线图，nc格式没准备好，下次做一个几种格式都支持的，通过扩展名来区分如何绘图。</p><p>成品大致如下：</p><p><img src="https://files.mdnice.com/user/38447/16a35eaa-a126-4278-8dae-1e450c1f5826.jpg"></p><p>代码方面，默认加底的jpg图，如果不做处理，会显示一个外边框，取消边框显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">self.fig = Figure()</span><br><span class="line">#######################################</span><br><span class="line"># 读取图片</span><br><span class="line">image = plt.imread(&#x27;image.jpg&#x27;)</span><br><span class="line"></span><br><span class="line"># 创建一个新的图形窗口</span><br><span class="line">self.fig = plt.figure(1, figsize=[16,12])</span><br><span class="line"></span><br><span class="line"># 显示图片</span><br><span class="line">plt.imshow(image)</span><br><span class="line"></span><br><span class="line"># 关闭坐标轴</span><br><span class="line">#plt.axis(&#x27;off&#x27;)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line"></span><br><span class="line"># 隐藏边框</span><br><span class="line">plt.gca().spines[&#x27;top&#x27;].set_visible(False)</span><br><span class="line">plt.gca().spines[&#x27;bottom&#x27;].set_visible(False)</span><br><span class="line">plt.gca().spines[&#x27;left&#x27;].set_visible(False)</span><br><span class="line">plt.gca().spines[&#x27;right&#x27;].set_visible(False)</span><br><span class="line">self.canvas = FigureCanvas(self.fig)</span><br><span class="line">self.layout.addWidget(self.canvas)</span><br></pre></td></tr></table></figure><p><img src="https://files.mdnice.com/user/38447/1ddc8025-b073-4aa3-8744-d1d94ed6973e.png"></p><p>绘图部分，调节各边的距离</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.fig = plt.figure(1, figsize=[16,14])</span><br><span class="line">plt.subplots_adjust(left=0.08, right=0.99,top=0.99,bottom=0.03)</span><br></pre></td></tr></table></figure><p>最后删除启动时加载的图层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if hasattr(self, &#x27;canvas&#x27;):</span><br><span class="line">    self.layout.removeWidget(self.canvas)</span><br><span class="line">    self.canvas.close()</span><br><span class="line"></span><br><span class="line">self.canvas = FigureCanvas(self.fig)</span><br><span class="line">self.layout.addWidget(self.canvas)</span><br></pre></td></tr></table></figure><p>整体情况基本这些。</p><p>最近关于<code>PyQt6</code>的几篇文字：</p><p><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">Python PyQt6 设计图形界面，PyQt6 与 MatPlotlib 实现简易绘图小程序</a></p><p><a href="https://mp.weixin.qq.com/s/sA7Td18xswkChAIjBEF4_w">Python PyQt6 设计图形界面，QGridLayout实现一个简单的发邮件和简易计算小软件</a></p><p><a href="https://mp.weixin.qq.com/s/BwBJFyEBcFWcacwpaloCMg">Python PyQt6设计图形界面一点小改进，简单实现标签页面切换</a></p><p><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></p><p>最后，点赞、关注、收藏、在看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前两天做了一个简易PyQt6绘图小程序&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA&quot;&gt;Python PyQt6设计图形界面，PyQt6与MatPlotlib实现简易绘图小程序&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/pyQt6%E9%BB%91%E9%BE%99%E6%B1%9F%E7%9C%81%E7%AE%80%E6%98%93%E7%BB%98%E5%9B%BE%E7%A8%8B%E5%BA%8F/"/>
    <id>http://cacity.live/2023/12/29/pyQt6%E9%BB%91%E9%BE%99%E6%B1%9F%E7%9C%81%E7%AE%80%E6%98%93%E7%BB%98%E5%9B%BE%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-12-29T14:01:07.019Z</published>
    <updated>2023-06-22T15:41:11.483Z</updated>
    
    <content type="html"><![CDATA[<p>来个简易绘图小程序，目标就是为了实现某些特定的情境绘图，把绘图代码整合到PyQt6，如果原始Matplotlib绘图能更简单点儿。</p><p>绘图流程，用matplotlib绘制底较长，通过cartopy加载河流、湖的线条，加载省、地区和县级的shp线条，绘制几个点位信息，标注文字。这些是matplotlib的基本操作了，</p><p><img src="https://files.mdnice.com/user/38447/a3e77651-3b23-4890-b6cd-4f4b0b5f65ac.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt6.QtWidgets import QApplication, QVBoxLayout, QPushButton, QLabel, QLineEdit, QWidget, QFileDialog</span><br><span class="line">import PyQt6</span><br><span class="line">from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas</span><br><span class="line">from matplotlib.figure import Figure</span><br><span class="line">import cartopy.crs as ccrs</span><br><span class="line">import cartopy.io.shapereader as shpreader</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import cartopy</span><br><span class="line">import matplotlib.font_manager as fm</span><br><span class="line">import cartopy.io.shapereader as shpreader</span><br><span class="line">import geopandas as gpd</span><br><span class="line">from cartopy.mpl.gridliner import LATITUDE_FORMATTER, LONGITUDE_FORMATTER</span><br><span class="line">from matplotlib.ticker import MultipleLocator</span><br><span class="line">import PyQt6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 指定中文字体，这里使用了微软雅黑，你需要确保你的系统中有这个字体文件</span><br><span class="line">font = fm.FontProperties(fname=&#x27;C:\\Windows\\Fonts\\msyh.ttc&#x27;)</span><br><span class="line"></span><br><span class="line">class MapPlotter(QWidget):</span><br><span class="line">    def __init__(self, parent=None):</span><br><span class="line">        super(MapPlotter, self).__init__(parent)</span><br><span class="line">        self.setWindowIcon(PyQt6.QtGui.QIcon(&quot;logo.jpg&quot;))</span><br><span class="line">        self.figure = Figure()</span><br><span class="line">        self.canvas = FigureCanvas(self.figure)</span><br><span class="line">        self.ax = self.figure.add_subplot(111, projection=ccrs.PlateCarree())</span><br><span class="line">        self.init_ui()</span><br><span class="line"></span><br><span class="line">    def init_ui(self):</span><br><span class="line">        self.setWindowTitle(&quot;桥然：简易地理信息绘图程序&quot;)</span><br><span class="line">        self.resize(900, 800)</span><br><span class="line">        self.ax.set_extent([122, 136, 43, 54])  # 选择绘图区域范围</span><br><span class="line">        #self.ax.add_feature(cartopy.feature.LAND)</span><br><span class="line">        #self.ax.add_feature(cartopy.feature.OCEAN)</span><br><span class="line">        #self.ax.add_feature(cartopy.feature.COASTLINE)</span><br><span class="line"></span><br><span class="line">        self.ax.add_feature(cartopy.feature.OCEAN.with_scale(&#x27;50m&#x27;))</span><br><span class="line">        #self.ax.add_feature(cartopy.feature.LAND.with_scale(&#x27;50m&#x27;))</span><br><span class="line">        self.ax.add_feature(cartopy.feature.RIVERS.with_scale(&#x27;50m&#x27;))</span><br><span class="line">        self.ax.add_feature(cartopy.feature.LAKES.with_scale(&#x27;50m&#x27;))</span><br><span class="line"></span><br><span class="line">        #self.ax.add_feature(cartopy.feature.BORDERS, linestyle=&#x27;-&#x27;)</span><br><span class="line">        #self.ax.add_feature(cartopy.feature.LAKES, alpha=0.5)</span><br><span class="line">        #self.ax.add_feature(cartopy.feature.RIVERS)</span><br><span class="line">        # 加载国界和省界shp文件</span><br><span class="line">        gdf = gpd.read_file(&#x27;map/2023年初地级矢量.shp&#x27;)</span><br><span class="line">        gdf1 = gpd.read_file(&#x27;map/2023年初县矢量.shp&#x27;)</span><br><span class="line">        # 打印列名</span><br><span class="line">        print(gdf1.columns)</span><br><span class="line"></span><br><span class="line">        # 查看前几行数据</span><br><span class="line">        print(gdf1.head())</span><br><span class="line">        country_boundary  = gdf[gdf[&#x27;省级&#x27;] == &#x27;黑龙江省&#x27;]</span><br><span class="line"></span><br><span class="line">        xian  = gdf1[gdf1[&#x27;省级&#x27;] == &#x27;黑龙江省&#x27;]</span><br><span class="line">        province_boundary = shpreader.Reader(&#x27;map/bou2_4p.shp&#x27;)</span><br><span class="line">        self.ax.add_geometries(country_boundary.geometry, ccrs.PlateCarree(), facecolor=&#x27;none&#x27;, edgecolor=&#x27;black&#x27;, linewidth=0.4)</span><br><span class="line">        self.ax.add_geometries(xian.geometry, ccrs.PlateCarree(), facecolor=&#x27;none&#x27;, edgecolor=&#x27;black&#x27;, linewidth=0.1)</span><br><span class="line">        self.ax.add_geometries(province_boundary.geometries(), ccrs.PlateCarree(), facecolor=&#x27;none&#x27;, edgecolor=&#x27;black&#x27;, linewidth=0.5)</span><br><span class="line"></span><br><span class="line">        # 绘制城市</span><br><span class="line">        cities = &#123;</span><br><span class="line">            &#x27;哈尔滨&#x27;: [126.63, 45.75],</span><br><span class="line">            &#x27;牡丹江&#x27;: [129.6, 44.58],</span><br><span class="line">            &#x27;佳木斯&#x27;: [130.37, 46.82],</span><br><span class="line">            &#x27;大庆&#x27;: [125.03, 46.58],</span><br><span class="line">            &#x27;绥化&#x27;: [126.98, 46.63],</span><br><span class="line">            &#x27;鹤岗&#x27;: [130.3, 47.33],</span><br><span class="line">            &#x27;伊春&#x27;: [128.92, 47.72],</span><br><span class="line">            &#x27;五大连池&#x27;: [126.2, 48.52]</span><br><span class="line">        &#125;</span><br><span class="line">        for city, (lon, lat) in cities.items():</span><br><span class="line">            #self.ax.plot(lon, lat, &#x27;bo&#x27;, markersize=5, transform=ccrs.PlateCarree())</span><br><span class="line">            self.ax.scatter(lon, lat, marker=&#x27;s&#x27;, color=&#x27;green&#x27;, s=20, transform=ccrs.PlateCarree())</span><br><span class="line">            # 在此处添加字体属性</span><br><span class="line">            self.ax.text(lon, lat + 0.15, city, fontsize=9, ha=&#x27;center&#x27;, transform=ccrs.PlateCarree(), fontproperties=font)</span><br><span class="line">        # 设置经纬度刻度线</span><br><span class="line">        self.ax.gridlines(draw_labels=True, linewidth=0.5, color=&#x27;gray&#x27;, alpha=0.5, linestyle=&#x27;--&#x27;)</span><br><span class="line">        self.ax.gridlines(xlocs=[120, 136], ylocs=[42, 54], linewidth=1, color=&#x27;black&#x27;, alpha=1.0)</span><br><span class="line">        #self.ax.xaxis.set_ticks_position(&#x27;bottom&#x27;)</span><br><span class="line">        #self.ax.yaxis.set_ticks_position(&#x27;left&#x27;)</span><br><span class="line">        #self.ax.tick_params(axis=&#x27;x&#x27;, labeltop=False, labelbottom=True, labelsize=8)</span><br><span class="line">        #self.ax.tick_params(axis=&#x27;y&#x27;, labelleft=True, labelright=False, labelsize=8)</span><br><span class="line">        self.ax.yaxis.set_major_locator(MultipleLocator(2))</span><br><span class="line">        # Label the end-points of the gridlines using the custom tick makers:</span><br><span class="line">        #self.ax.xaxis.set_major_formatter(LONGITUDE_FORMATTER) </span><br><span class="line">        #s#elf.ax.yaxis.set_major_formatter(LATITUDE_FORMATTER)</span><br><span class="line">        #self.ax.xaxis.set_tick_params(labelbottom=True, labeltop=False)</span><br><span class="line">        #self.ax.yaxis.set_tick_params(labelleft=True, labelright=False)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(self.canvas)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = MapPlotter()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之前写的PyQt6相关内容：</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5NTM0ODc5Mw==&mid=2247485288&idx=1&sn=84c1caa386addf4145028526be0ba506&chksm=ec55b83edb223128759de0139e2d3e53cebf636c51fca624fb6877526dd57de16e2efe265241#rd">PyQt6小软件-基于Python的数据质量监控周报自动化处理与生成反馈报表，邮件自动下载，Excel报表自动生成</a></li><li><a href="https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g">Python PyQt6绘图解析 - PyQt6 GUI图形界面扫描ping程序简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g">Copilot免费实现ChatPDF功能，可上传PDF附件，对文章进行问答&#x2F;总结</a></li><li><a href="https://mp.weixin.qq.com/s/0bEDRh0TH62pmp5mTKij-A">PyQt6绘图兰勃特投影中国9段线&#x2F;10段线图，绘制nc等值线图，绘图代码GUI移植</a></li><li><a href="https://mp.weixin.qq.com/s/a7l65MU4wPww19ctiIwhsA">PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">Python PyQt6 设计图形界面，PyQt6 与 MatPlotlib 实现简易绘图小程序</a></li><li><a href="https://mp.weixin.qq.com/s/sA7Td18xswkChAIjBEF4_w">Python PyQt6 设计图形界面，QGridLayout实现一个简单的发邮件和简易计算小软件</a></li><li><a href="https://mp.weixin.qq.com/s/BwBJFyEBcFWcacwpaloCMg">Python PyQt6设计图形界面一点小改进，简单实现标签页面切换</a></li><li><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></li></ul><p>代码及相关资料，后台回复：“黑龙江01”，稍后补充发送资料包。</p><p>感兴趣记得点赞关注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来个简易绘图小程序，目标就是为了实现某些特定的情境绘图，把绘图代码整合到PyQt6，如果原始Matplotlib绘图能更简单点儿。&lt;/p&gt;
&lt;p&gt;绘图流程，用matplotlib绘制底较长，通过cartopy加载河流、湖的线条，加载省、地区和县级的shp线条，绘制几个点位信</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%20ping%E5%B0%8F%E8%BD%AF%E4%BB%B6%E4%B8%8E%E9%BB%91%E9%BE%99%E6%B1%9F%E5%9C%B0%E5%9B%BE%E7%BB%93%E5%90%88/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%20ping%E5%B0%8F%E8%BD%AF%E4%BB%B6%E4%B8%8E%E9%BB%91%E9%BE%99%E6%B1%9F%E5%9C%B0%E5%9B%BE%E7%BB%93%E5%90%88/</id>
    <published>2023-12-29T14:01:07.018Z</published>
    <updated>2023-06-24T10:24:47.692Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间分别完成了：</p><ul><li><a href="https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g">PythonPyQt6绘图解析-PyQt6GUI图形界面扫描ping程序简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/QsUmjdjfO_HKks8mXT08Jw">PyQt6简易地理信息绘图小程序，加载shp文件，绘制点位，标注文字</a></li></ul><p>这个软件包含两个简单的功能。一个是用于进行ping测试的小工具，另一个是使用PyQt6和Matplotlib结合绘制底图的应用程序。今天，我将这两部分代码组合在一起。左侧是ping功能部分，右侧是黑龙江的底图。ping测试的结果将在右侧底图上显示。</p><p>目前代码只完成了部分功能，还有一些待完成的功能。右侧的底图旨在展示ping测试之后的结果。为了实现这个效果，所有的IP地址都被标记为红色点，理论上应该有一些红色和一些绿色。此外，我还计划实现一个鼠标放置在红色点附近时显示文字提示的功能，但目前还不清楚如何实现。</p><p>这只是代码的一部分，尚未完全实现所有功能。</p><p><img src="https://files.mdnice.com/user/38447/7ad57b01-2378-441a-becb-9f1f87360f87.png"></p><p>代码方面，把原来ping的最后一个布局的填到加<code>QHBoxLayout</code>，右侧的底图是一个<code>FigureCanvas</code>，填加到上<code>QHBoxLayout</code>，把这个布局做为最后的布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.setLayout(self.HH_layout)</span><br></pre></td></tr></table></figure><p>右侧的图，启动时加载一张空白图，让整图形位置固定，重新绘图时，删除原来的<code>FigureCanvas</code>，绘制好重新填加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if hasattr(self,&#x27;canvas&#x27;):</span><br><span class="line">  self.HH_layout.removeWidget(self.canvas)</span><br><span class="line">  self.canvas.close()</span><br></pre></td></tr></table></figure><p>ping的结果存在一个字典里，ping后的颜色，green表示通，red表示不通，绘制好基本底图，再加上一个绘点的图层：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for row,iteminenumerate(self.ip_list):</span><br><span class="line">  station_name,measurement_name,ip,longitude,latitude=item</span><br><span class="line">  self.ax.scatter(float(longitude),float(latitude),marker=&#x27;s&#x27;,color=&#x27;red&#x27;,s=15,transform=ccrs.PlateCarree())</span><br></pre></td></tr></table></figure><p>背景点位信息又加了些控制点，均来自搜索结果。</p><p>另外加了一个日志存取，把每次ping的结果写入一个json文件，存在本地。</p><p>目前就这些功能和想法。最近也想组建一个python学习群，有兴趣的加我微信。</p><p><img src="https://files.mdnice.com/user/38447/e1e25b31-0db9-4886-baf0-9a5613f95770.png"></p><p>之前写的PyQt6相关内容：</p><ul><li><a href="https://mp.weixin.qq.com/s/QsUmjdjfO_HKks8mXT08Jw">PyQt6简易地理信息绘图小程序，加载shp文件，绘制点位，标注文字</a></li><li><a href="https://mp.weixin.qq.com/s/L1P5aL68zPdGoAqjIMF2Ow">PyQt6小软件-基于Python的数据质量监控周报自动化处理与生成反馈报表，邮件自动下载，Excel报表自动生成</a></li><li><a href="https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g">PythonPyQt6绘图解析-PyQt6GUI图形界面扫描ping程序简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g">Copilot免费实现ChatPDF功能，可上传PDF附件，对文章进行问答&#x2F;总结</a></li><li><a href="https://mp.weixin.qq.com/s/0bEDRh0TH62pmp5mTKij-A">PyQt6绘图兰勃特投影中国9段线&#x2F;10段线图，绘制nc等值线图，绘图代码GUI移植</a></li><li><a href="https://mp.weixin.qq.com/s/a7l65MU4wPww19ctiIwhsA">PyQt6绘图解析-PyQtGUI图形界面绘图简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">PythonPyQt6设计图形界面，PyQt6与MatPlotlib实现简易绘图小程序</a></li><li><a href="https://mp.weixin.qq.com/s/sA7Td18xswkChAIjBEF4_w">PythonPyQt6设计图形界面，QGridLayout实现一个简单的发邮件和简易计算小软件</a></li><li><a href="https://mp.weixin.qq.com/s/BwBJFyEBcFWcacwpaloCMg">PythonPyQt6设计图形界面一点小改进，简单实现标签页面切换</a></li><li><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">PythonPyQt6设计图形界面，实现一个简单的ping功能小软件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前一段时间分别完成了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ii2QSLlmCa_pC30ayoy68g&quot;&gt;PythonPyQt6绘图解析-PyQt6GUI图形界面扫描ping程序简单实现和实操&lt;/a&gt;&lt;/li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/pyqt6%20ping%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%A7%A3%E6%9E%90/"/>
    <id>http://cacity.live/2023/12/29/pyqt6%20ping%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%A7%A3%E6%9E%90/</id>
    <published>2023-12-29T14:01:07.016Z</published>
    <updated>2023-06-10T08:56:16.704Z</updated>
    
    <content type="html"><![CDATA[<p>之后做了<br><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></p><p>这是一个简单的循环 ping 程序，我朋友提出了关于 ping 的建议。现在，我想将程序界面修改为显示站点名和所在城市等信息。另外，我还有一个想法，就是将这些站点在地理底图上显示出来。目前，这只是一个初步的想法，还没有具体实现。</p><p><code>PyQt6</code>做图形化界面，可以使用<code>designer.exe</code>，开始设计代码时，需要安装<code>PyQt6-tools</code>，安装好后，会在python目录下会有一个<code>qt6_applications</code>目录，我的文件在:<br><code>\AppData\Roaming\Python\Python39\site-packages\qt6_applications\Qt\bin</code>下，直接可以运行，为方便下次使用，可以把这个路径加入系统路径。</p><p>图形界面可以用<code>designer.exe</code>进行设计，把想要用的组件，拖动放到正确的位置，就可以了，比如：</p><p><img src="https://files.mdnice.com/user/38447/d5e37a57-386c-4cf6-97a2-44d49a357f78.png"></p><p>要将设计好的界面保存为 ColorD.ui 文件，并通过 pyuic6.exe 将其转换为 Python 代码，需要执行以下步骤：</p><ol><li>将设计好的界面保存为 ColorD.ui 文件。</li><li>在系统中搜索 pyuic6.exe 文件的位置。可以尝试在以下位置查找：<ul><li>如果你使用 Anaconda&#x2F;Miniconda，则可以在 Anaconda&#x2F;Miniconda 安装目录下的 Scripts 文件夹中找到 pyuic6.exe 文件。</li><li>如果你使用纯粹的 Python 环境，则可以在 Python 的安装目录下的 Scripts 文件夹中找到 pyuic6.exe 文件。</li></ul></li><li>将找到的 pyuic6.exe 文件的路径添加到系统的 PATH 环境变量中。这样，你就可以在命令行中直接使用 pyuic6.exe 命令。</li><li>打开命令提示符（cmd）。</li><li>在命令提示符中，使用以下命令将 ColorD.ui 文件转换为 Python 代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic6 -o ColorD.py ColorD.ui</span><br></pre></td></tr></table></figure>这将使用 pyuic6.exe 工具将 ColorD.ui 文件转换为 ColorD.py Python 代码，并保存在当前目录下。</li></ol><p>完成以上步骤后，你将在当前目录中得到一个名为 ColorD.py 的 Python 代码文件，其中包含从 ColorD.ui 文件生成的界面代码。你可以在 Python 程序中导入并使用该生成的代码来创建界面。</p><p>转好的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from PyQt6 import QtCore, QtGui, QtWidgets</span><br><span class="line">from PyQt6.QtWidgets import QColorDialog,QFontDialog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ui_Form(object):</span><br><span class="line">    def setupUi(self, Form):</span><br><span class="line">        Form.setObjectName(&quot;Form&quot;)</span><br><span class="line">        Form.resize(400, 300)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(Form)</span><br><span class="line">        self.verticalLayout.setObjectName(&quot;verticalLayout&quot;)</span><br><span class="line">        self.textEdit = QtWidgets.QTextEdit(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(14)</span><br><span class="line">        self.textEdit.setFont(font)</span><br><span class="line">        self.textEdit.setObjectName(&quot;textEdit&quot;)</span><br><span class="line">        self.verticalLayout.addWidget(self.textEdit)</span><br><span class="line">        self.horizontalLayout = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout.setObjectName(&quot;horizontalLayout&quot;)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(12)</span><br><span class="line">        self.pushButton.setFont(font)</span><br><span class="line">        self.pushButton.setObjectName(&quot;pushButton&quot;)</span><br><span class="line">        self.horizontalLayout.addWidget(self.pushButton)</span><br><span class="line">        self.pushButton.clicked.connect(self.ColorDialog)</span><br><span class="line">        self.pushButton_2 = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(12)</span><br><span class="line">        self.pushButton_2.setFont(font)</span><br><span class="line">        self.pushButton_2.setObjectName(&quot;pushButton_2&quot;)</span><br><span class="line">        self.pushButton_2.clicked.connect(self.fontDialog)</span><br><span class="line">        self.horizontalLayout.addWidget(self.pushButton_2)</span><br><span class="line">        self.verticalLayout.addLayout(self.horizontalLayout)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def ColorDialog(self):</span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        self.textEdit.setTextColor(color)</span><br><span class="line"></span><br><span class="line">    def fontDialog(self):</span><br><span class="line">        font,ok = QFontDialog.getFont()</span><br><span class="line">        if ok:</span><br><span class="line">            self.textEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">    def retranslateUi(self, Form):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(&quot;Form&quot;, &quot;Form&quot;))</span><br><span class="line">        self.pushButton.setText(_translate(&quot;Form&quot;, &quot;Color Dialog&quot;))</span><br><span class="line">        self.pushButton_2.setText(_translate(&quot;Form&quot;, &quot;Font Dialog&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    import sys</span><br><span class="line">    app = QtWidgets.QApplication( sys.argv)</span><br><span class="line">    Form = QtWidgets.QWidget()</span><br><span class="line">    ui = Ui_Form()</span><br><span class="line">    ui.setupUi(Form)</span><br><span class="line">    Form.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><p>运行结果如图：</p><p><img src="https://files.mdnice.com/user/38447/18a180a8-0765-46b6-8bbf-8bab97941137.png"></p><p>当然，本次的小程序的界面是直接用代码手动撸的。</p><p><img src="https://files.mdnice.com/user/38447/8b0db607-d617-4ceb-b326-861fc67b7a60.png"></p><p>一个<code>QVBoxLayout</code>上，依次填加了<code>QTableView</code>，<code>QHBoxLayout</code>和<code>QLineEdit</code>，<code>QHBoxLayout</code>上又填加了两了<code>QPushButton</code>，一个<code>QCheckBox</code>，还有<code>QLabel</code>和<code>QLineEdit</code>等。</p><p>在一个<code>QVBoxLayout</code>布局中，按顺序添加了以下控件：<code>QTableView</code>、<code>QHBoxLayout</code>、<code>QLineEdit</code>。其中，<code>QHBoxLayout</code>布局中又添加了两个<code>QPushButton</code>、一个<code>QCheckBox</code>、一个<code>QLabel</code>和一个<code>QLineEdit</code>等控件。</p><p><code>QVBoxLayout</code>布局中包含的控件：<code>QTableView</code>、<code>QHBoxLayout</code>、<code>QLineEdit</code>。<br><code>QHBoxLayout</code>布局中包含的控件：<code>QPushButton</code>、<code>QPushButton</code>、<code>QCheckBox</code>、<code>QLabel</code>、<code>QLineEdit</code>。</p><p>经过以上的操作，基本界面成型。</p><p>后台回复：<strong>宝箱</strong>，有惊喜。</p><ul><li><a href="https://mp.weixin.qq.com/s/0bEDRh0TH62pmp5mTKij-A">PyQt6绘图兰勃特投影中国9段线&#x2F;10段线图，绘制nc等值线图，绘图代码GUI移植</a></li><li><a href="https://mp.weixin.qq.com/s/a7l65MU4wPww19ctiIwhsA">PyQt6绘图解析-PyQt GUI图形界面绘图简单实现和实操</a></li><li><a href="https://mp.weixin.qq.com/s/gfMT7uD2EwvCTR_zyhwoEA">Python PyQt6 设计图形界面，PyQt6 与 MatPlotlib 实现简易绘图小程序</a></li><li><a href="https://mp.weixin.qq.com/s/sA7Td18xswkChAIjBEF4_w">Python PyQt6 设计图形界面，QGridLayout实现一个简单的发邮件和简易计算小软件</a></li><li><a href="https://mp.weixin.qq.com/s/BwBJFyEBcFWcacwpaloCMg">Python PyQt6设计图形界面一点小改进，简单实现标签页面切换</a></li><li><a href="https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA">Python PyQt6设计图形界面，实现一个简单的ping功能小软件</a></li></ul><p>下一步是两个<code>class</code>的编写，一个是<code>MainWindow(QWidget)</code>，一个是<code>ScanThread(QThread)</code>。</p><p>先说<code>MainWindow(QWidget)</code>,</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之后做了&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/f_7jzVZiqqJG3CD42zupZA&quot;&gt;Python PyQt6设计图形界面，实现一个简单的ping功能小软件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个简单的循环 ping 程序，我朋友提</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cacity.live/2023/12/29/PyQt6%20ping%20%E4%BB%A3%E7%A0%81/"/>
    <id>http://cacity.live/2023/12/29/PyQt6%20ping%20%E4%BB%A3%E7%A0%81/</id>
    <published>2023-12-29T14:01:07.014Z</published>
    <updated>2023-06-10T14:11:36.872Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line">import csv,sys,time</span><br><span class="line">import socket</span><br><span class="line">from PyQt6.QtWidgets import (QApplication, QWidget,QMainWindow,QStackedLayout,</span><br><span class="line">                             QCheckBox,QLabel,QLineEdit ,QHBoxLayout,QVBoxLayout, </span><br><span class="line">                             QTableWidget, QTableWidgetItem, QPushButton, QTextEdit, QHeaderView)</span><br><span class="line">from PyQt6.QtCore import Qt, QThread, pyqtSignal,QUrl</span><br><span class="line">from PyQt6.QtMultimedia import QSoundEffect</span><br><span class="line">from PyQt6.QtGui import QBrush, QColor, QPainter</span><br><span class="line">from PyQt6 import QtGui </span><br><span class="line">import PyQt6</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.image as mpimg</span><br><span class="line">from PyQt6.QtWidgets import  QGraphicsView, QGraphicsScene, QGraphicsEllipseItem</span><br><span class="line">from PyQt6.QtCore import Qt, QTimer, QCoreApplication, QPointF</span><br><span class="line">import datetime as dt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ScanThread(QThread):</span><br><span class="line">    update_signal = pyqtSignal(int, str, str, str, str,int)  # 添加序号参数</span><br><span class="line">    def __init__(self, ip_list):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.ip_list = ip_list</span><br><span class="line">        self.running = True  # 增加一个标志位，用于控制线程的运行状态</span><br><span class="line">        self.i = 0</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        for index, item in enumerate(self.ip_list):  # 增加序号</span><br><span class="line">            if not self.running:</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            station_name, measurement_name, ip ,longitude, latitude= item</span><br><span class="line">            if self.ping(ip):</span><br><span class="line">                #self.update_signal.emit(index, station_name, measurement_name, ip, &quot;green&quot;,self.i)  # 网络通时设置绿色字体</span><br><span class="line">                self.update_signal.emit(index, station_name, measurement_name, ip, &quot;green&quot;,self.i)  # 网络通时设置绿色字体</span><br><span class="line">            else:</span><br><span class="line">                #self.update_signal.emit(index, station_name, measurement_name, ip, &quot;red&quot;,self.i)  # 网络不通时设置红色字体</span><br><span class="line">                self.update_signal.emit(index, station_name, measurement_name, ip, &quot;red&quot;,self.i)  # 网络不通时设置红色字体</span><br><span class="line">            self.sleep(1)</span><br><span class="line"></span><br><span class="line">    def ping(self, ip):</span><br><span class="line">        try:</span><br><span class="line">            now = dt.datetime.now()</span><br><span class="line">            print(&quot;时间：&quot; +str(now) +&quot; IP:&quot; + ip)</span><br><span class="line">            socket.create_connection((ip, 80), timeout=1)</span><br><span class="line">            return True</span><br><span class="line">        except (socket.timeout, ConnectionRefusedError):</span><br><span class="line">            print(f&#x27;&#123;ip&#125;不通&#x27;)</span><br><span class="line">            self.i = self.i + 1</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">class MainWindow(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(&quot;桥然：ping扫描程序-测试版V1.0.11&quot;)</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowIcon(PyQt6.QtGui.QIcon(&quot;logo.jpg&quot;))</span><br><span class="line">        #self.setGeometry(500,300,400,300)</span><br><span class="line"></span><br><span class="line">        self.ip_list = self.read_ip_list()</span><br><span class="line">        self.checked_ips = []</span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.setInterval(300000)  # 设置定时器间隔为5分钟</span><br><span class="line">        self.timer.timeout.connect(self.start_scan)  # 定时器超时触发start_scan方</span><br><span class="line">        self.timer.stop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        l = QStackedLayout()</span><br><span class="line">        H_layout= QHBoxLayout()</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.table_widget = QTableWidget()</span><br><span class="line">        self.table_widget.setColumnCount(6) </span><br><span class="line">        self.table_widget.setHorizontalHeaderLabels([&quot;网站名&quot;, &quot;所在省市&quot;, &quot;参考IP&quot;, &quot;通&quot;, &quot;不通&quot;,&quot;连通率&quot;])</span><br><span class="line">        self.table_widget.setRowCount(len(self.ip_list))</span><br><span class="line">        self.table_widget.cellChanged.connect(self.handle_cell_changed)</span><br><span class="line">        self.table_widget.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)</span><br><span class="line">        self.table_widget.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)</span><br><span class="line">        self.table_widget.setSelectionMode(QTableWidget.SelectionMode.MultiSelection)</span><br><span class="line"></span><br><span class="line">        for row, item in enumerate(self.ip_list):</span><br><span class="line">            station_name, measurement_name, ip ,longitude, latitude= item</span><br><span class="line">            #self.table_widget.setItem(row, 0, QTableWidgetItem(str(row + 1)))  # 序号从1开始</span><br><span class="line">            self.table_widget.setItem(row, 0, QTableWidgetItem(station_name))</span><br><span class="line">            self.table_widget.setItem(row, 1, QTableWidgetItem(measurement_name))</span><br><span class="line">            self.table_widget.setItem(row, 2, QTableWidgetItem(&quot;*.*.*.*&quot;))</span><br><span class="line">            #self.table_widget.setItem(row, 3, QTableWidgetItem(&quot;12*.**&quot;))</span><br><span class="line">            #self.table_widget.setItem(row, 4, QTableWidgetItem(&quot;4*.**&quot;))</span><br><span class="line"></span><br><span class="line">        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)</span><br><span class="line">        self.table_widget.verticalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)</span><br><span class="line">        layout.addWidget(self.table_widget)</span><br><span class="line"></span><br><span class="line">        hbox_layout1 = QHBoxLayout()</span><br><span class="line">        self.scan_button = QPushButton(&quot;开始扫描&quot;)</span><br><span class="line">        self.scan_button.clicked.connect(self.start_scan)</span><br><span class="line">        hbox_layout1.addWidget(self.scan_button)</span><br><span class="line">        </span><br><span class="line">        self.stop_button = QPushButton(&quot;停止扫描&quot;)  # 添加停止扫描按钮</span><br><span class="line">        self.stop_button.clicked.connect(self.stop_scan)</span><br><span class="line">        hbox_layout1.addWidget(self.stop_button)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        self.ch_box =QCheckBox(&quot;定时扫描：&quot;)</span><br><span class="line">        self.ch_box.toggled.connect(self.handle_enable_checkbox)</span><br><span class="line">        hbox_layout1.addWidget(self.ch_box)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        self.interval_label = QLabel(&quot;时间间隔：&quot;)</span><br><span class="line">        hbox_layout1.addWidget(self.interval_label)</span><br><span class="line"></span><br><span class="line">        self.interval_lineedit = QLineEdit(&quot;5&quot;)</span><br><span class="line">        self.interval_lineedit.setValidator(QtGui.QIntValidator(1, 9999))  # 设置输入范围为1到9999</span><br><span class="line">        self.interval_lineedit.setEnabled(False) </span><br><span class="line">        hbox_layout1.addWidget(self.interval_lineedit)</span><br><span class="line"></span><br><span class="line">        self.start_button = QPushButton(&quot;定时扫描&quot;)</span><br><span class="line">        self.start_button.clicked.connect(self.start_scan)  # 将按钮点击事件与run_scan方法绑定</span><br><span class="line">        self.start_button.setEnabled(False) </span><br><span class="line">        hbox_layout1.addWidget(self.start_button)</span><br><span class="line">        layout.addLayout(hbox_layout1)</span><br><span class="line"></span><br><span class="line">        self.result_textedit = QTextEdit()</span><br><span class="line">        layout.addWidget(self.result_textedit)</span><br><span class="line"></span><br><span class="line">        hbox_layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        layout.addLayout(hbox_layout)</span><br><span class="line">        #H_layout.addLayout(layout)</span><br><span class="line">        self.graphics_view = QGraphicsView()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_view.setScene(self.graphics_scene)</span><br><span class="line">        #layout.addWidget(self.graphics_view)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        #self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.scan_thread = None  </span><br><span class="line">        self.media_player = None  # 添加一个媒体播放器对象</span><br><span class="line">        self.alert_sound = QSoundEffect()</span><br><span class="line">        self.i = 0 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def read_ip_list(self):</span><br><span class="line">        ip_list = []</span><br><span class="line">        with open(&quot;ip_list.csv&quot;, &quot;r&quot;, encoding=&quot;gbk&quot;) as file:</span><br><span class="line">            reader = csv.reader(file)</span><br><span class="line">            print(&#x27;read_ip_list is ready&#x27;)</span><br><span class="line">            for row in reader:</span><br><span class="line">                station_name, measurement_name, ip,longitude, latitude = row</span><br><span class="line">                ip_list.append((station_name, measurement_name, ip,longitude, latitude))</span><br><span class="line">        return ip_list</span><br><span class="line"></span><br><span class="line">    def handle_cell_changed(self, row, column):</span><br><span class="line">        if column == 2:</span><br><span class="line">            ip = self.ip_list[row][2]</span><br><span class="line">            if ip in self.checked_ips:</span><br><span class="line">                self.checked_ips.remove(ip)</span><br><span class="line">            else:</span><br><span class="line">                self.checked_ips.append(ip)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def start_scan(self):</span><br><span class="line">        if self.scan_thread and self.scan_thread.isRunning():</span><br><span class="line">            self.stop_scan()  # 停止之前的扫描线程</span><br><span class="line">        </span><br><span class="line">        self.result_textedit.clear()</span><br><span class="line">        self.result_textedit.append(&quot;开始扫描...\n&quot;)</span><br><span class="line">        self.scan_thread = ScanThread(self.ip_list)</span><br><span class="line">        self.scan_thread.update_signal.connect(self.handle_scan_result)</span><br><span class="line">        self.scan_thread.finished.connect(self.handle_scan_finished)</span><br><span class="line">        self.scan_thread.start()</span><br><span class="line">        self.timer.start()</span><br><span class="line">    def closeEvent(self, event):</span><br><span class="line">        # 在关闭事件中执行自定义的逻辑</span><br><span class="line">        self.stop_scan()</span><br><span class="line">        print(&quot;关闭事件被触发&quot;)</span><br><span class="line">    def stop_scan(self):</span><br><span class="line">        if self.scan_thread:</span><br><span class="line">            self.scan_thread.running = False</span><br><span class="line">            self.scan_thread.quit()</span><br><span class="line">            self.scan_thread.wait()</span><br><span class="line">        self.result_textedit.append(&quot;\n扫描已停止&quot;)</span><br><span class="line">        self.timer.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def handle_scan_result(self, index, station_name, measurement_name, ip, color,i):  # 添加序号参数和颜色参数</span><br><span class="line">        result = f&quot;第 &#123;index + 1&#125; 个扫描结果：&#123;station_name&#125; - &#123;measurement_name&#125; (&#123;ip&#125;)&quot;</span><br><span class="line">        self.result_textedit.setTextColor(QColor(color))  # 设置字体颜色</span><br><span class="line">        self.result_textedit.append(result)</span><br><span class="line">        if color == &quot;red&quot; :</span><br><span class="line">            self.play_alert_sound()</span><br><span class="line">        if index == len(self.ip_list) - 1:</span><br><span class="line">            self.show_summary_message()</span><br><span class="line">        self.i = i</span><br><span class="line">    def show_summary_message(self):</span><br><span class="line">        total_count = len(self.ip_list)</span><br><span class="line">        success_count = len(self.checked_ips)</span><br><span class="line">        failure_count = total_count - success_count</span><br><span class="line"></span><br><span class="line">        summary_message = f&quot;--------------------------------------------------\n&quot;</span><br><span class="line">        summary_message += f&quot;扫描结束！总共扫描了 &#123;total_count&#125; 个IP地址。\n&quot;</span><br><span class="line">        #self.result_textedit.append(summary_message)</span><br><span class="line">        summary_message += f&quot;成功连接的IP地址：&#123;total_count-self.i&#125; 个。\n&quot;</span><br><span class="line">        #self.result_textedit.append(summary_message)</span><br><span class="line">        #summary_message += f&quot;连接失败的IP地址：&#123;failure_count&#125; 个。&quot;</span><br><span class="line">        summary_message += f&quot;连接失败的IP地址：&#123;self.i&#125; 个。\n&quot;</span><br><span class="line">        summary_message += f&quot;--------------------------------------------------&quot;</span><br><span class="line">        self.result_textedit.append(summary_message)</span><br><span class="line">    def handle_scan_finished(self):</span><br><span class="line">        self.result_textedit.append(&quot;\n扫描完成&quot;)</span><br><span class="line"></span><br><span class="line">    def play_alert_sound(self):</span><br><span class="line"></span><br><span class="line">        self.alert_sound.setSource(QUrl.fromLocalFile(&quot;line.wav&quot;))</span><br><span class="line">        self.alert_sound.play()</span><br><span class="line"></span><br><span class="line">    def handle_enable_checkbox(self, state):</span><br><span class="line">        if self.ch_box.isChecked():</span><br><span class="line">            print(&quot;开始循环&quot;)</span><br><span class="line">            self.timer.setInterval(300000)  # 设置定时器间隔为5分钟</span><br><span class="line">            self.timer.timeout.connect(self.start_scan)  # 定时器超时触发start_scan方</span><br><span class="line">            </span><br><span class="line">            self.interval_lineedit.setEnabled(True)  # 启用行编辑框</span><br><span class="line">            self.start_button.setEnabled(True)  # 启用按钮</span><br><span class="line">        else:</span><br><span class="line">            self.interval_lineedit.setEnabled(False)  # 禁用行编辑框</span><br><span class="line">            self.start_button.setEnabled(False) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GraphWidget(QWidget):</span><br><span class="line">    def init(self):</span><br><span class="line">        super().init()</span><br><span class="line">        self.setMinimumSize(800, 600)</span><br><span class="line">        self.points = &#123;&#125;  # 存储点位信息</span><br><span class="line">        self.highlighted_ips = []  # 存储高亮IP列表</span><br><span class="line"></span><br><span class="line">    def paintEvent(self, event):</span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line"></span><br><span class="line">        # 加载黑龙江省市县边界底图</span><br><span class="line">        #img = mpimg.imread(&quot;heilongjiang_map.png&quot;)</span><br><span class="line">        #plt.imshow(img)</span><br><span class="line"></span><br><span class="line">        # 加载黑龙江省河流张条图</span><br><span class="line">        #river_img = mpimg.imread(&quot;heilongjiang_river.png&quot;)</span><br><span class="line">        #plt.imshow(river_img, alpha=0.4)</span><br><span class="line"></span><br><span class="line">        # 标记特定城市</span><br><span class="line">        city_coords = &#123;</span><br><span class="line">            &quot;哈尔滨&quot;: (126.534967, 45.803775),</span><br><span class="line">            &quot;齐齐哈尔&quot;: (123.918186, 47.354348),</span><br><span class="line">            &quot;牡丹江&quot;: (129.598732, 44.588521),</span><br><span class="line">            &quot;佳木斯&quot;: (130.318917, 46.799923),</span><br><span class="line">            &quot;伊春&quot;: (128.840492, 47.72752),</span><br><span class="line">            &quot;大庆&quot;: (125.11272, 46.590734),</span><br><span class="line">            &quot;加格达奇&quot;: (124.123012, 50.414442)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for city, coords in city_coords.items():</span><br><span class="line">            longitude, latitude = coords</span><br><span class="line">            if city in self.highlighted_ips:</span><br><span class="line">                plt.plot(longitude, latitude, &quot;ro&quot;, markersize=5)  # 高亮显示为红色点</span><br><span class="line">            else:</span><br><span class="line">                plt.plot(longitude, latitude, &quot;go&quot;, markersize=5)  # 默认显示为绿色点</span><br><span class="line"></span><br><span class="line">        plt.axis(&quot;off&quot;)  # 关闭坐标轴</span><br><span class="line"></span><br><span class="line">    def update_points(self, points, highlighted_ips):</span><br><span class="line">        self.points = points</span><br><span class="line">        self.highlighted_ips = highlighted_ips</span><br><span class="line">        self.update()  # 刷新图形展示区</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    app = QApplication([])</span><br><span class="line">    window = MainWindow()</span><br><span class="line">    #window.resize(600,900)</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
</feed>
